##########################
###HFC issues
#11.17.2024
#Xiaoming Zhang
#######################################


pacman::p_load(knitr, tidyverse, dplyr, here, sf, ggplot2, readxl, writexl, janitor, randomizr, RCT, purrr)

getwd()

# Drafts from previous work----

# 
# check <- village_check %>%
#     mutate(expected_attempt_round = floor(expected_attempt)) %>%    
#   mutate(check = ifelse(expected_attempt_round > attempt, 1, 0)) %>%
#     select(villageid_key, attempt, expected_attempt, expected_attempt_round, check)
# 
# rulindo_15 <- read_xlsx(path = file.path("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/datawork/RCT_data/baseline/data/Rulindo_15kv.xlsx"))
# 
# check <- check %>% 
#   filter(!villageid_key %in% rulindo_15$Code_vill) %>% 
#   mutate(check = ifelse(is.na(check), 1, check))
# 
# sum(check$check == 1, na.rm = TRUE)
# 
# village_check_district <- village_check %>% 
#   mutate(
#     expected_complete_nomin= round(pmin(hh_head_06 * (complete / attempt)),2)
#   ) %>% 
#   group_by(district_key) %>% 
#   summarise(
#     expected_complete_nomin = sum(expected_complete_nomin, na.rm = TRUE)
#   )
# 
# village_reached <- sum(!is.na(village_check$attempt))
# 
# village_noreach <- village_check %>% 
#   filter(is.na(village_check$attempt))
# 
# write_xlsx(village_noreach, path = file.path(data_path, "villages not reached baseline(03112025).xlsx"))
# 
# # expected total completed = min(20, total households * (completed / attempts))
# # expected total attempted = expected total completed * (attempts / completed)
# 
# # 
# average across villages with >= 10 attempts
# fraction of villages with >= 10 attempts 
# 
# attempt_10 <- village_check %>% 
#   filter(attempt >= 10) %>% 
#   mutate(
#     expected_complete = ifelse(is.na(expected_complete), 0, expected_complete)
#   )
# 
# mean(attempt_10$expected_complete, na.rm = TRUE)
# mean(attempt_10$expected_attempt, na.rm = TRUE)
# district_completion <- hfc_constr %>%
#   group_by(districtid_key) %>%
#   summarise(
#     attempt = n(),
#     complete = sum(finish == 1),
#     no_complete = sum(finish == 0),
#     consent = sum(consent == 1, na.rm = TRUE),
#     no_consent = sum(consent == 0, na.rm = TRUE),
#     completion_rate = paste0(round(complete / attempt, 3) * 100, "%"),
#     consent_rate = paste0(round(consent / attempt, 3) * 100, "%")
#   ) %>%
# ungroup()


#4. Daily completions----
# 
# daily_completion <- hfc_constr %>%
#   group_by(submissiondate) %>%
#   summarise(
#     attempt = n(),
#     complete = sum(finish == 1),
#     no_complete = sum(finish== 0), 
#     no_locate = sum(locate ==0),
#   
#     have_electricity = sum(A1_2 == 1 | A1_3 == 1, na.rm = TRUE),
#     other = no_complete - no_locate - have_electricity
#   )
# 
# # hfc_sheet %>%
# #   
# #   sheet_write(data = daily_completion, sheet = "daily_completion")
# # 
# # 1

daily_start <- hfc_constr %>%
  group_by(startdate) %>%
  summarise(
    attempt = n(),
    long = sum(finish == 1),
    no_complete = sum(finish== 0), 
    no_locate = sum(locate ==0, na.rm = TRUE),
    have_electricity = sum(A1_2 == 1 | A1_3 == 1, na.rm = TRUE),
    other = no_complete - no_locate - have_electricity
  ) %>% 
  ungroup() %>% 
  mutate(
    short = ifelse(startdate <= "2024-11-13", attempt - long, attempt - no_locate - long)
  ) %>% 
  select(startdate, attempt, long, short,no_locate, everything())



mean_attempt_enum <- hfc_constr %>%
  group_by(enumerator, startdate) %>%
  summarize(
    num_attempted_surveys = n(), 
    .groups = 'drop'
  ) %>%
  group_by(startdate) %>%
  summarize(
    mean_attempted_enumerator = round( mean(num_attempted_surveys), 2), # Calculate mean per enumerator
    .groups = 'drop'
  )

daily_start <- left_join(daily_start, mean_attempt_enum, by = c("startdate"))

mean_long_enum <- hfc_constr %>%
  group_by(enumerator, startdate) %>%
  summarize(
    num_long_surveys = sum(finish == 1), 
    .groups = 'drop'
  ) %>%
  group_by(startdate) %>%
  summarize(
    mean_long_enumerator = round( mean(num_long_surveys), 2), # Calculate mean per enumerator
    .groups = 'drop'
  )

daily_start <- left_join(daily_start, mean_long_enum, by = c("startdate"))




mean_short_enum <- hfc_constr %>%
  group_by(enumerator, startdate) %>%
  summarize(
    attempt = n(),  # Calculate the total attempts
    complete = sum(finish == 1, na.rm = TRUE),  # Completed surveys
    no_locate = sum(locate == 0, na.rm = TRUE),  # No location
    short = ifelse(startdate <= "2024-11-13", attempt - complete, attempt - no_locate - complete), 
    num_completed_surveys = complete,  # To calculate the mean later
    .groups = 'drop'
  ) %>%
  group_by(startdate) %>%
  summarize(
    mean_short_enumerator = round(mean(short, na.rm = TRUE), 2),  # Mean completed surveys per enumerator
    .groups = 'drop'
  )

daily_start <- left_join(daily_start, mean_short_enum, by = c("startdate"))







hfc_sheet %>%
  
  sheet_write(data = daily_start, sheet = "daily_completion")


1
# mutate(
#   across(
#     enumerator,
#     ~ case_when(
#       is.na(.x) ~ 0,
#       TRUE      ~ .x
#     )
#   )
# ) %>%
# check <- village_check %>%
#     mutate(expected_attempt_round = floor(expected_attempt)) %>%    
#   mutate(check = ifelse(expected_attempt_round > attempt, 1, 0)) %>%
#     select(villageid_key, attempt, expected_attempt, expected_attempt_round, check)
# 
# rulindo_15 <- read_xlsx(path = file.path("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/datawork/RCT_data/baseline/data/Rulindo_15kv.xlsx"))
# 
# check <- check %>% 
#   filter(!villageid_key %in% rulindo_15$Code_vill) %>% 
#   mutate(check = ifelse(is.na(check), 1, check))
# 
# sum(check$check == 1, na.rm = TRUE)
# 
# village_check_district <- village_check %>% 
#   mutate(
#     expected_complete_nomin= round(pmin(hh_head_06 * (complete / attempt)),2)
#   ) %>% 
#   group_by(district_key) %>% 
#   summarise(
#     expected_complete_nomin = sum(expected_complete_nomin, na.rm = TRUE)
#   )
# 
# village_reached <- sum(!is.na(village_check$attempt))
# 
# village_noreach <- village_check %>% 
#   filter(is.na(village_check$attempt))
# 
# write_xlsx(village_noreach, path = file.path(data_path, "villages not reached baseline(03112025).xlsx"))
# 
# # expected total completed = min(20, total households * (completed / attempts))
# # expected total attempted = expected total completed * (attempts / completed)
# 
# # 
# average across villages with >= 10 attempts
# fraction of villages with >= 10 attempts 
# 
# attempt_10 <- village_check %>% 
#   filter(attempt >= 10) %>% 
#   mutate(
#     expected_complete = ifelse(is.na(expected_complete), 0, expected_complete)
#   )
# 
# mean(attempt_10$expected_complete, na.rm = TRUE)
# mean(attempt_10$expected_attempt, na.rm = TRUE)
#12 villages----


village_12 <- village_check %>% 
  mutate(
    village = as.character(villageid_key)
  ) %>% 
  filter(villageid_key %in% c("32030402", "32070103", "32080307",
                                      "32090105", "32090108", "32090305",
                                      "32110105", "32120506", "32120606",
                                      "32120204", "32130303", "32130402")) %>% 
  select(!starts_with("2024")) %>% 
  select(!starts_with("2025"))

write_xlsx(village_12, path = file.path(data_path, "village_12_noscope.xlsx"))

#Output raw data----

raw_data <- hfc_constr %>% 
  select(-contains("name"), -contains("coordinate")) %>% 
  select(
    submissiondate, startdate, enddate, enumerator_key, district_key, districtid_key,province_key, provinceid_key, sector_key, sector, cell_key,cell, village_key, village, everything() )
  

write_xlsx(raw_data, path = file.path(data_path, "raw_data_01142024.xlsx"))
write_xlsx(raw_data, path = file.path(data_path, "raw_data_02192024.xlsx"))
#Rusizi_lot_2 remaining----

rusizi_2 <- four_scope %>% 
  filter(lot %in% "Rusizi-2")

rusizi_2_remain <- village_check %>% 
  filter(villageid_key %in% rusizi_2$village_id )

rusizi_2_na <- rusizi_2_remain %>% 
  filter(is.na(attempt))

sum(rusizi_2_na$num_to_survey)
sum(is.na(rusizi_2_remain$attempt))

sum(rusizi_2_remain$hh_head_06[is.na(rusizi_2_remain$attempt)])








#backcheck issues--village_check#backcheck issues----

bc_hh <- hfc_constr %>% 
  filter(
    hh_id == "411404011006" | hh_id == "411404010285"
  ) %>% 
  mutate(hh_id = as.character(hh_id)) %>% 
  select(startdate, submissiondate, enumerator, enumerator_key,
         district, district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, 
         hh_head_name, consent, no_consent_reason, A1_2, A1_2_label, A1_3, A1_3_label, locate) 



write_xlsx(bc_hh, path = file.path(data_path, "backcheck_issue_20241219.xlsx"))




###audio check----



audio_two <- hfc_constr %>% 
  mutate(
    audio_check = ifelse(grepl("media", audio, ignore.case = TRUE), audio, NA)
  ) %>% 
  filter(!is.na(audio_check)) %>% 
  filter(
    hh_id == "411404011006" | hh_id == "411404010285"
  ) %>% 
  select(
    district, district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, submissiondate, enumerator, enumerator_key, phonenumber, audio
  ) %>% 
  mutate(
    hh_id = as.character(hh_id)
  ) 


# Create a new folder with the date as the name
audio_folder <- file.path("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/backcheck_20241219.xlsx")
dir.create(audio_folder, showWarnings = FALSE)

# Define the media folder path
source_folder <- "C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/datawork/HFC/data/media"

# Extract the filenames (without 'media\' prefix)
audio_filenames <- basename(audio_two$audio)

# Full paths to the audio files in the media folder
audio_files <- file.path(source_folder, audio_filenames)

# Check which files exist and filter them
existing_files <- audio_files[file.exists(audio_files)]

# Copy the filtered files to the new folder
file.copy(existing_files, audio_folder)

write_xlsx(audio_two, path = file.path(audio_folder, "audiocheck_list.xlsx"))














#Filter no hh_head_name---

no_name <- hfc_constr %>% 
  filter(
    A1_2 == 0 & A1_3 == 0 & consent == 1
    
  ) 

all_hh <- hfc_constr %>% 
  select(startdate, submissiondate, enumerator, enumerator_key,
         district, district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, hh_head_name, consent, no_consent_reason, A1_2, A1_2_label, A1_3, A1_3_label, locate) %>% 
  rename(
    grid = A1_2, 
    solar = A1_3
  ) 

write_xlsx(all_hh, path = file.path(data_path, "all_surveyed_12192024.xlsx"))      



#How many villages to finish----
# can you quickly compute, how many replacements do they need to reach 20, 18 and 15 households per village? 
# Take the per village the average number of replacements visited
# for all villages they completed 20, 18 and 15 separately for each. 


replacement_list <- read_xlsx(path = file.path("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/datawork/RCT_data/baseline/data/Updated scope villages& households/household_replacement.xlsx"))
  
  
village_replacement <- hfc_constr %>% 
  group_by(village) %>% 
  summarise(visited_replacement = sum(hh_id %in% replacement_list$household_id, na.rm = TRUE))


village_replacement <- left_join(village_check, village_replacement, by = c("villageid_key" = "village"))


mean_20 <- village_replacement %>%
  filter(complete >= 20) %>%
  summarise(mean_visited = mean(visited_replacement, na.rm = TRUE)) %>%
  pull(mean_visited)

mean_18 <- village_replacement %>%
  filter(complete >= 18) %>%
  summarise(mean_visited = mean(visited_replacement, na.rm = TRUE)) %>%
  pull(mean_visited)

mean_15 <- village_replacement %>%
  filter(complete >= 15) %>%
  summarise(mean_visited = mean(visited_replacement, na.rm = TRUE)) %>%
  pull(mean_visited)

# Print results
mean_20
mean_18
mean_15
#Unique enumerators----

enumerator <- hfc_constr %>% 
  filter(
    startdate <= "2024-12-15"
  ) 

#Check one household----


one_hh <- hfc_constr %>% 
  filter(
    hh_id == "411503010331"
  ) %>% 
  select(starttime, endtime, submissiondate, enumerator, enumerator_key,
         district, sector, cell, village, hh_id, consent, finish, location, comment, 
         
         
         #Duration
         survey_duration,
         roster_duration,
         energy_duration,
         wellbeing_duration,
         willingness_duration,
         housing_assets_duration,
         business_duration,
         savings_duration,
         mobile_duration,
         livestock_duration,
         cleancooking_duration,
         mental_health_duration,
         social_desirability_duration,
         all_duration,
         
         
         #household head roster
         starts_with("A1"), hh_head_name, gender, marital, head_age_calculate, education, high_edu,  starts_with("A2"),
         starts_with("A3"),
         
         #energy wellbeing
         starts_with("B4"), starts_with("B5"),
         
         #housing assets
         starts_with("C1"), starts_with("C2"), starts_with("C3"),
         
         #business
         starts_with("D1"), starts_with("D2"), starts_with("D3"),starts_with("D4"),
         
         #savings
         starts_with("E1"), formal_savings, informal_savings, starts_with("E2"), starts_with("E3"), starts_with("E4"),
         
         
         # #mobile
         # starts_with("F"),
         
         #land and agriculture
         starts_with("G"),
         
         #Energy
         starts_with("H"),
         
         #clean_cooking
         starts_with("I"),
         
         #willingness
         
         starts_with("J"),
         
         #mental health
         starts_with("B1"), starts_with("B2"), starts_with("B3"),
         
         #desirability
         starts_with("K")
         
  ) 



write_xlsx(one_hh, path = file.path(data_path, "411503010331.xlsx"))




#Duplicate check-----


duplicates_enumerator <- hfc_constr %>% 
  filter(consent == 1) %>% 
  group_by(hh_id) %>%  # Group by household ID
  mutate(n = n_distinct(enumerator)) %>%  # Count distinct enumerators for each household
  filter(n > 1) %>%  # Keep only households with more than 1 enumerator
  ungroup() %>% 
  select(enumerator, enumerator_key, district, district_key, sector, sector_key, 
         cell, cell_key, village, village_key, hh_id, hh_head_name, A1_2, A1_3,
         starttime, submissiondate, n) %>% 
  rename(
    grid_connect = A1_2,
    offgrid_connect = A1_3
  ) %>% 
  arrange(desc(hh_id))

# Write to Google Sheet
hfc_sheet %>%
  sheet_write(data = duplicates_enumerator, sheet = "duplicates_enumerator")


1

duplicates_general <- hfc_constr %>% 
  filter(hh_id %in% duplicates_enumerator$hh_id | hh_id %in% duplicates$hh_id) %>% 
  select(starttime, endtime, submissiondate, enumerator, enumerator_key,
         district, sector, cell, village, hh_id, consent, finish, location,
         
         
         #Duration
         survey_duration,
         roster_duration,
         energy_duration,
         wellbeing_duration,
         willingness_duration,
         housing_assets_duration,
         business_duration,
         savings_duration,
         mobile_duration,
         livestock_duration,
         cleancooking_duration,
         mental_health_duration,
         social_desirability_duration,
         all_duration,
         
         
         #household head roster
         starts_with("A1"), hh_head_name, gender, marital, head_age_calculate, education, high_edu,  starts_with("A2"),
         starts_with("A3"),
         
         #energy wellbeing
         starts_with("B4"), starts_with("B5"),
         
         #housing assets
         starts_with("C1"), starts_with("C2"), starts_with("C3"),
         
         #business
         starts_with("D1"), starts_with("D2"), starts_with("D3"),starts_with("D4"),
         
         #savings
         starts_with("E1"), formal_savings, informal_savings, starts_with("E2"), starts_with("E3"), starts_with("E4"),
         
         
         # #mobile
         # starts_with("F"),
         
         #land and agriculture
         starts_with("G"),
         
         #Energy
         starts_with("H"),
         
         #clean_cooking
         starts_with("I"),
         
         #willingness
         
         starts_with("J"),
         
         #mental health
         starts_with("B1"), starts_with("B2"), starts_with("B3"),
         
         #desirability
         starts_with("K")
         
  ) %>% 
  arrange(desc(hh_id))



write_xlsx(duplicates_general, path = file.path(data_path, "duplicates_general_01082025.xlsx"))

duplicate_issue <- read_xlsx(path = file.path(data_path, "duplicates_general.xlsx"), sheet = "need_report")

duplicate_need_report <- hfc_constr %>% 
  filter(hh_id %in% duplicate_issue$hh_id) %>% 
  select(starttime, endtime, submissiondate, enumerator, enumerator_key,
         district, district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, phonenumber, comment
         
  ) %>% 
  arrange(desc(hh_id))

write_xlsx(duplicate_need_report, path = file.path(data_path, "duplicate_report.xlsx"))




#Completed village----

village_complete <- village_check %>% 
  filter(
     hh_head_06 == attempt | complete == 20 
  )

village_check.1 <- village_check %>% 
  mutate(
    complete.1 = ifelse(hh_head_06 == attempt | complete == 20 , 1, 0)
  ) %>% 
  select(-starts_with("2024"))

sum(village_check.1$complete.1, na.rm = TRUE)
village_no_complete <- village_check %>% 
  anti_join(village_complete, by = c("villageid_key"))

sum(village_no_complete)











#Filter two households-----

two_hh <- hfc_constr %>% 
  filter(
    hh_id == "410503050266" | hh_id == "410503050233"
  ) %>% 
  select(starttime, endtime, submissiondate, enumerator, enumerator_key,
         district,district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, consent, finish, location)
         
  )

write_xlsx(two_hh , path = file.path(data_path, "issue_hh_12102024.xlsx"))



#Two household audio check----



##Audio check----

audio_two <- hfc_constr %>% 
  mutate(
    audio_check = ifelse(grepl("media", audio, ignore.case = TRUE), audio, NA)
  ) %>% 
  filter(!is.na(audio_check)) %>% 
  filter(
    hh_id == "410503050266" | hh_id == "410503050233"
  ) %>% 
  select(
    district, district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, submissiondate, enumerator, enumerator_key, phonenumber, audio
  ) %>% 
  mutate(
    hh_id = as.character(hh_id)
  ) 


# Create a new folder with the date as the name
audio_folder <- file.path("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/special_case.xlsx")
dir.create(audio_folder, showWarnings = FALSE)

# Define the media folder path
source_folder <- "C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/datawork/HFC/data/media"

# Extract the filenames (without 'media\' prefix)
audio_filenames <- basename(audio_two$audio)

# Full paths to the audio files in the media folder
audio_files <- file.path(source_folder, audio_filenames)

# Check which files exist and filter them
existing_files <- audio_files[file.exists(audio_files)]

# Copy the filtered files to the new folder
file.copy(existing_files, audio_folder)

write_xlsx(audio_two, path = file.path(audio_folder, "audiocheck_list.xlsx"))








#Electric generator-----

electric_generator <- hfc_constr %>% 
  filter(H3_1_label == "Electric Generator") %>% 
  select(startdate, submissiondate,enumerator, enumerator_key, district, district_key, sector, sector_key, 
         cell, cell_key, village, village_key, hh_id,  H3_1_label, phonenumber) %>% 
  rename(
    main_energy_source = H3_1_label
  )
  

write_xlsx(electric_generator, path = file.path(data_path, "electric_generator_hh.xlsx"))














#Audio check duplicates----

audio_18 <- read_xlsx("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/20241118/audiocheck_list.xlsx")
audio_19 <- read_xlsx("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/20241119/audiocheck_list.xlsx")
audio_20 <- read_xlsx("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/20241120/audiocheck_list.xlsx")
audio_24 <- read_xlsx("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/20241124/audiocheck_list.xlsx")
audio_25 <- read_xlsx("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/20241125/audiocheck_list.xlsx")
audio_26 <- read_xlsx("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/20241126/audiocheck_list.xlsx")

audio_18 <- audio_18 %>% select(hh_id)
audio_19 <- audio_19 %>% select(hh_id)
audio_20 <- audio_20 %>% select(hh_id)
audio_24 <- audio_24 %>% select(hh_id)
audio_25 <- audio_25 %>% select(hh_id)
audio_26 <- audio_26 %>% select(hh_id)

backcheck_before <- read.csv("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/cto attachments/household_head.csv")
##Audio check----

audio_before <- rbind(audio_18, audio_19, audio_20, audio_20, audio_24, audio_25, audio_26)

audio <- hfc_constr %>% 
  filter(
    submissiondate == c("2024-11-18", "2024-11-19", "2024-11-20", "2024-11-24", "2024-11-25", "2024-11-26")
  ) %>% 
 filter(!hh_id %in% audio_before$hh_id) %>% 
  filter(!hh_id %in% backcheck_before$household_id)

audio_select <- audio %>% 
  mutate(
    audio_check = ifelse(grepl("media", audio, ignore.case = TRUE), audio, NA)
  ) %>% 
  filter(!is.na(audio_check)) %>% 
  # filter(submissiondate == "2024-11-19") %>% 
  select(
    district, district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, submissiondate, enumerator, enumerator_key, phonenumber, audio
  ) %>% 
  mutate(
    hh_id = as.character(hh_id)
  ) %>% 
  sample_n(min(n(), 59 ))


# Create a new folder with the date as the name
audio_folder <- file.path("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/Duplicates_1119_1126.xlsx")
dir.create(audio_folder, showWarnings = FALSE)

# Define the media folder path
source_folder <- "C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/datawork/HFC/data/media"

# Extract the filenames (without 'media/' prefix)
audio_filenames <- basename(audio_select$audio)

# Full paths to the audio files in the media folder
audio_files <- file.path(source_folder, audio_filenames)

# Check which files exist and filter them
existing_files <- audio_files[file.exists(audio_files)]

# Copy the filtered files to the new folder
file.copy(existing_files, audio_folder)

write_xlsx(audio_select, path = file.path(audio_folder, "audiocheck_list.xlsx"))


























#Lighting energy----

main_lightenergy <- hfc_constr %>% 
  filter(!is.na(H3_1)) %>% 
  select(
   H3_1,H3_1_label, H7_1, H7_1_label, H7_3, H7_3_label
  ) %>% 
  mutate(
    flash_light = ifelse(H3_1 == 6, "Uses electric torch", "Don't use electric torch")
  ) %>% 
  group_by(flash_light, H7_1_label) %>% 
  summarise(
    count = n()
  )

main_lightenergy <- main_lightenergy %>% 
  group_by(flash_light) %>% 
  mutate(
    total_count = sum(count),                 # Total count for the category
    percentage = paste0(round(count / total_count, 2) * 100, "%") # Percentage within the category
  ) %>% 
  select(-total_count) %>% 
  rename(
    main_lighting_energy = H7_1_label
  )

# Separate datasets for each category
flash <- main_lightenergy %>% 
  filter(flash_light == "Uses electric torch")

noflash <- main_lightenergy %>% 
  filter(flash_light == "Don't use electric torch")
  


#Daily achievements----
karongi <- read_xlsx(path = file.path(data_path, "Daily achievements_1125.xlsx"), sheet = "Karongi")
rutsiro <- read_xlsx(path = file.path(data_path, "Daily achievements_1125.xlsx"), sheet = "Rutsiro")
rulindo <- read_xlsx(path = file.path(data_path, "Daily achievements_1125.xlsx"), sheet = "Rulindo")
rusizi <- read_xlsx(path = file.path(data_path, "Daily achievements_1125.xlsx"), sheet = "Rusizi")


daily_achievements <- bind_rows(karongi, rutsiro, rulindo, rusizi)

day_mapping <- data.frame(
  input_value = c(paste0("Day ", 1:14), as.character(1:14)),
  date_value = rep(seq.Date(from = as.Date("2024-11-11"), 
                            to = as.Date("2024-11-24"), 
                            by = "days"), 2)
)

# Clean and transform `daily_achievements`
daily_achievements <- daily_achievements %>% 
  rename(
    date = ...1,
    order = ...2
  ) %>% 
  clean_names() %>% 
  mutate(across(everything(), str_to_title)) %>% 
  mutate(
    successful = ifelse(is.na(successful), "No", successful)
  ) %>% 
  mutate(
    reason_for_unsucessful = ifelse(successful == "Yes", NA, reason_for_unsucessful)
  ) %>% 
  # Replace `date` values based on the mapping
  left_join(day_mapping, by = c("date" = "input_value")) %>% 
  mutate(date = as.character(date_value)) %>% 
  select(-date_value)


for (i in 2:nrow(daily_achievements)) {
  if (is.na(daily_achievements$date[i])) {
    daily_achievements$date[i] = daily_achievements$date[i - 1]
  }
}

daily_achievements <- daily_achievements %>% 
  filter(!is.na(district))



#Other issues more -------
combine_reasons <- function(reason) {
  # Trim whitespace and ensure the input is clean
  reason <- trimws(reason)
  
  if (is.na(reason)) {
    return("Completed")
  } else if (grepl("died|passed away|deceased", reason, ignore.case = TRUE)) {
    return("Death-Related")
  } else if (grepl("migrated|migration", reason, ignore.case = TRUE)) {
    return("Migration-Related")
  } else if (grepl("not available|not found|wasn't around|not around", reason, ignore.case = TRUE)) {
    return("Unavailable")
  } else if (grepl("solar energy|has solar", reason, ignore.case = TRUE)) {
    return("Solar Energy Related")
  } else if (grepl("connected to grid|connected to the grid|grid|electricity", reason, ignore.case = TRUE)) {
    return("Grid Connection Related")
  } else if (grepl("old|speech impairment", reason, ignore.case = TRUE)) {
    return("Old Age-Related")
  } else if (grepl("tomorrow", reason, ignore.case = TRUE)) {
    return("Surveying Tomorrow")
  } else {
    return("Others")
  }
}


# Apply the function to the 'reason_for_unsucessful' column
daily_achievements$grouped_reason <- sapply(daily_achievements$reason_for_unsucessful, combine_reasons)

# View the results
table(daily_achievements$grouped_reason)

#Group by district----

issue_analysis <- daily_achievements %>% 
  group_by(grouped_reason, district) %>% 
  summarise(
    count = n(),
    .groups = 'drop'
  ) %>% 
  ungroup() %>% 
  # Calculate percentage within each district
  group_by(district) %>% 
  mutate(
    percent_issue = paste0(round(count / sum(count), 4) * 100, "%"),  # Percentage of observations within the district
    stats = paste0(count, " (", percent_issue, ")")
  ) %>% 
  ungroup() %>% 
  arrange(desc(count)) %>% 
  select(grouped_reason, district, stats) %>%
  pivot_wider(names_from = district, values_from = stats) 

summarise <- daily_achievements %>% 
  group_by(district) %>% 
  summarise(
    count = n()
  ) %>%   
  pivot_wider(names_from = district, values_from = count) %>% 
  mutate(
    grouped_reason = "Total"
  ) %>% 
  select(grouped_reason, Rulindo, Rutsiro, Rusizi, Karongi)

issue_analysis <- rbind(issue_analysis, summarise)




daily_track <- daily_achievements %>% 
  group_by(submissiondate) %>% 
  







# 
# #Group by issue
# issue_analysis_reason <- daily_achievements %>% 
#   group_by(grouped_reason) %>% 
#   summarise(
#     count = n(),
#   ) %>% 
#   mutate(
#     percent_issue = paste0(round(count / sum(count), 4) * 100, "%"),  # Percentage of observations within the district
#     stats = paste0(count, " (", percent_issue, ")")
#   ) %>% 
#   ungroup() %>% 
#   arrange(desc(count)) %>% 
#   select(grouped_reason,  stats) %>% 
#   rename(
#     total_count = stats
#   )
# 
# summarise_reason <- daily_achievements %>% 
#   summarise(
#     count = n()
#   ) %>%   
#   mutate(
#     grouped_reason = "Total"
#   ) %>% 
#   select(grouped_reason, count) %>% 
#   rename(
#     total_count = count
#   )
# 
# issue_analysis_reason <- rbind(issue_analysis_reason, summarise_reason)
# 
# 
# issue_analysis <- left_join(issue_analysis, issue_analysis_reason, by = c("grouped_reason"))
# 
# 
# 
# custom_order <- c("Completed", "Solar Energy Related", "Grid Connection Related","Migration-Related", "Unavailable", 
#                    "Old Age-Related", "Death-Related", "Others", "Total")
# 
# # Reorder rows based on the custom order
# issue_analysis <- issue_analysis %>%
#   mutate(grouped_reason = factor(grouped_reason, levels = custom_order)) %>%
#   arrange(grouped_reason)
# 
# 
# 
# write_xlsx(issue_analysis, path = "C:/Users/wb614406/Downloads/issue_analysis.xlsx")
# 
# 
# 



#Enumerator----


gloriose <- hfc_constr %>% 
  filter(enumerator == 31 & submissiondate >= "2024-11-11") %>% 
  select(
    district, district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, phonenumber, audio
  )



source_folder <- "C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/datawork/HFC/data/media"

# Extract the filenames (without 'media/' prefix)
audio_filenames <- basename(gloriose$audio)

# Full paths to the audio files in the media folder
audio_files <- file.path(source_folder, audio_filenames)

# Check which files exist and filter them
existing_files <- audio_files[file.exists(audio_files)]

gloriose_folder <- "C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/gloriose"

dir.create(gloriose_folder, showWarnings = FALSE)

# Copy the filtered files to the new folder
file.copy(existing_files, gloriose_folder)

write_xlsx(gloriose, path = file.path(gloriose_folder, "survey by gloriose.xlsx"))

write.csv(hfc_constr, file.path(data_path, "baseline_raw_11152024.csv"))



#Enumerator francine----


francine <- hfc_constr %>% 
  filter(enumerator == 11 & submissiondate >= "2024-11-11") %>% 
  select(
    district, district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, phonenumber, audio
  )



source_folder <- "C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/datawork/HFC/data/media"

# Extract the filenames (without 'media/' prefix)
audio_filenames <- basename(francine$audio)

# Full paths to the audio files in the media folder
audio_files <- file.path(source_folder, audio_filenames)

# Check which files exist and filter them
existing_files <- audio_files[file.exists(audio_files)]

francine_folder <- "C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/francine"

dir.create(francine_folder, showWarnings = FALSE)

# Copy the filtered files to the new folder
file.copy(existing_files, francine_folder)

write_xlsx(francine, path = file.path(francine_folder, "survey by francine.xlsx"))

write.csv(hfc_constr, file.path(data_path, "baseline_raw_11152024.csv"))




#For households with primary and secondary energy source distribution----

primary_energy <- hfc_constr %>%
  select(H3_1, H3_1_label,  A1_2, H1_1, A1_3, H2_1, submissiondate, village, village_key, hh_id, enumerator, enumerator_key, phonenumber) %>%
  filter(
    H3_1_label == "Solar home systems" | H3_1_label == "Grid"
  ) %>% 
   rename(
    "offgrid_question1" = A1_3,
    "offgrid_question2" = H2_1,
    "grid_question1" = A1_2,
    "grid_question2" = H1_1,
    "primary_energy" = H3_1,
   )


write_xlsx(primary_energy, path = file.path(logic_folder, "primary_energy.xlsx"))


elec_logic_check <- hfc_constr %>%
  filter( A1_2 != H1_1 | A1_3 != H2_1 | H8_6 != C3_14 ) %>%
  mutate(issue = "Electrification status & lightbulb unmatch") %>%
  select(hh_id, village, village_key, enumerator, enumerator_key, submissiondate, A1_2, H1_1, H3_1, H3_1_label, A1_3, H2_1, H8_6, C3_14,  audio) %>% 
rename(
  "offgrid_question1" = A1_3,
  "offgrid_question2" = H2_1,
  "grid_question1" = A1_2,
  "grid_question2" = H1_1,
  "primary_energy" = H3_1,
  "lightbulb1" = H8_6,
  "lightbulb2" = C3_14
)

source_folder <- "C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/datawork/HFC/data/media"

# Extract the filenames (without 'media/' prefix)
audio_filenames <- basename(elec_logic_check$audio)

# Full paths to the audio files in the media folder
audio_files <- file.path(source_folder, audio_filenames)

# Check which files exist and filter them
existing_files <- audio_files[file.exists(audio_files)]

logic_folder <- "C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/REP Backcheck survey/Audio Check/lighbulb unmatch"

dir.create(logic_folder, showWarnings = FALSE)

# Copy the filtered files to the new folder
file.copy(existing_files, logic_folder)

write_xlsx(elec_logic_check, path = file.path(logic_folder, "lightbulb mismatch.xlsx"))


#Replacement-----

##Graph----
four_scope<- read_xlsx(path ="C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/datawork/RCT_data/baseline/data/Updated scope villages& households/scope_193_0807.xlsx")
scope_villages <- read.csv("C:/Users/wb614406/Dropbox/Rwanda Energy/EAQIP/questionnaires/cto attachments/scope_villages.csv")

filter <- scope_villages %>% 
  filter(!villageid_key %in% four_scope$village_id)


four_scope <- four_scope %>% 
  mutate(
    replacement = hh_head_06 -surveyed
  )

replacement <- four_scope %>% 
  select(replacement) %>% 
  mutate(
    replacement = ifelse(replacement >= 50, 50, replacement)
  ) %>% 
  mutate(
    replacement_10 = ifelse(replacement >= 10, 1, 0)
  )
# 
# Provide a table with the distributions of replacement available as a histogram 
# for all the villages in the sample. The x axis would be the number of replacement 
# households available and y axis is the number of villages. Let us add a yellow line 
# for the current cut off - 2. Let us also add a red line for 5, 8 10 and 12. 

p1 <- ggplot(replacement, aes(x = replacement)) +
  geom_bar(fill = "lightblue", color = "black") +
  geom_vline(xintercept = c(2), linetype = "dashed", color = "blue", size = 2) +
  geom_vline(xintercept = c(5), linetype = "dashed", color = "red", size = 2) +
  geom_vline(xintercept = c(8), linetype = "dashed", color = "red", size = 2) +
  geom_vline(xintercept = c(10), linetype = "dashed", color = "red", size = 2) +
  geom_vline(xintercept = c(12), linetype = "dashed", color = "red", size = 2) +
  labs(
    title = "Household Available for Replacement",
    x = "Number of Replacement Households",
    y = "Number of Villages"
  ) +
  theme(
    plot.title = element_text(size = 30, face = "bold"),
    axis.title.x = element_text(size = 28),
    axis.title.y = element_text(size = 28),
    axis.text.x = element_text(size = 28),
    axis.text.y = element_text(size = 28)
  )

p1


##For completed households----

complete_villages <- village_completion %>% 
  filter(attempt >= 18)

completed_replacement <- four_scope %>% 
  filter(
    village_id %in% complete_villages$village
  ) 

complete_villages <- complete_villages %>% 
  select(village, attempt) %>% 
  mutate(village = as.character(village))

completed_replacement <- left_join(completed_replacement, complete_villages, by = c("village_id" = "village"))

completed_replacement <- completed_replacement %>% 
  mutate(
    complete_replacement = hh_head_06 - attempt
  )


summary_df <- completed_replacement %>% 
  group_by(district) %>% 
  summarise(
    attempt = sum(attempt, na.rm = TRUE), 
    replacement = sum(complete_replacement, na.rm = TRUE)
  ) 

# Transpose the dataframe
transposed_df <- summary_df %>%
  as.data.frame() %>%                # Convert to a regular dataframe for transposition
  column_to_rownames("district") %>% # Set district as row names
  t() %>%                            # Transpose
  as.data.frame()   %>% 
  mutate(
    Total = rowSums(.))# Convert back to a dataframe

# Display the resulting dataframe
transposed_df



###HFC----

today <- hfc_constr %>% 
  filter(submissiondate == "2024-11-25") 


