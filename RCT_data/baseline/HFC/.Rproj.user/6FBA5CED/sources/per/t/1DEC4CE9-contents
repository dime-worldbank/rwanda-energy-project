########################################################################################################
#                                                                                                      #
#                     HIGH-FREQUENCY CHECKS  -- ADMINISTRATIVE-LEVEL HIGH-FREQUENCY CHECKS             #
#                                                                                                      #
########################################################################################################

## PURPOSE      Create one or multiple administrative-level check sheets in the HFC dashboard.
## District 
## Villages  
## Households

## AUTHOR      Xiaoming Zhang (adapted from Adrien Ciret & Marc-Andrea Fiorina & Juliana Guerrero)

## LAST UPDATE  October 5, 2023

########################################################################################################

## 1. Import Data ----
# 


## libraries

library(tidyverse)
library(lubridate)
library(googlesheets4)

dropbox <- 'C:/Users/wb614406/Dropbox'

## Raw High Frequency Data (REMEMBER TO REENCRYPT)
hfc_constr <- read.csv(file.path(dropbox,
                                 'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/hfc_constr.csv'),
                       )

########################################################################################################

# Save useful data 
hfc_admin <- hfc_constr %>% select(starttime, endtime, submissiondate, enumerator, enumerator_key,
                                   district, sector, cell, village, hh_id, hh_id_confirm, consent, finish, location,
                                   
                                   #Duration
                                   ends_with("duration"),
                                   
                                   #household head roster
                                   starts_with("A1"), hh_head_name, gender, marital, age_calculate, education, high_edu, employment, starts_with("A2"),
                                   starts_with("A3"),
                                   
                                   #energy wellbeing
                                   starts_with("B4"), starts_with("B5"),
                                   
                                   #housing assets
                                   starts_with("C1"), starts_with("C2"), starts_with("C3"),
                                   
                                   #business
                                   starts_with("D1"), starts_with("D2"), starts_with("D3"),starts_with("D4"),
                                   
                                   #savings
                                   starts_with("E1"), formal_savings, informal_savings, starts_with("E2"), starts_with("E3"), starts_with("E4"),
                                   
                                   
                                   # #mobile
                                   # starts_with("F"),
                                   
                                   #land and agriculture
                                   starts_with("G"),
                                   
                                   #Energy
                                   starts_with("H"),
                                   
                                   #clean_cooking
                                   starts_with("I"),
                                   
                                   #willingness
                                   
                                   starts_with("J"),
                                   
                                   #mental health
                                   starts_with("B1"), starts_with("B2"), starts_with("B3"),
                                   
                                   #desirability
                                   starts_with("K")
                              
                                   )


## 1. Village----

village_final <- hfc_admin %>%
  group_by(across(c(village,district,sector,cell))) %>% 
  summarize(total = n()) %>%
  ungroup() 

# submitted forms
village_final <-  village_fin %>% 
  select(-c(village,cell,district,sector)) %>% 
  mutate(ID_05_enter=paste0("'",ID_05_enter)) %>% 
  left_join(sample_data %>% select(headid,village,cell,sector,district),
            by=c('ID_05_enter'='headid')) %>% 
  group_by(village,cell,district,sector) %>% 
  mutate(n_subs=n(),
         complete     = sum(survey_complete, na.rm = TRUE)) %>% 
  mutate(attrition = sum(consent==0,na.rm=T)) %>% 
  select(village,cell,district,sector,n_subs,complete,attrition)



# 1.2 Creating dataset to use for exporting village wise stats
village_final = village_final %>% 
  left_join(village_svy,by=c("village" = "village",
                             "district" = "district",
                             "cell" = "cell",
                             "sector" = "sector")) %>% 
  distinct()



# 1.3 Creating dataset to use for exporting daily village data
village_daily <- hfc_constr %>%
  
  group_by(across(c(village,district,sector,cell)), enddate) %>%
  count() %>%
  ungroup() %>%
  arrange(enddate) %>%
  pivot_wider(names_from = enddate, values_from = n)  


# 1.4 Creating dataset to use for exporting data from the last day of data collection
village_last_day <- hfc_constr %>%
  
  group_by(village,district,sector,cell) %>%
  
  filter(enddate == max((enddate), na.rm = TRUE)) %>%
  
  mutate(n = n()) %>%
  
  summarize(
    
    last_date       = unique(enddate),
    
    ld_survey_num   = first(n),#,#first(n, na.rm = TRUE),
    
    ld_complete        = sum(survey_complete, na.rm = TRUE)
    
  ) %>% select(village,district,sector,cell,last_date,ld_survey_num,ld_complete)


# 1.5 Merging data from total, daily and last day numbers at the village level
village_final <- village_final %>% 
  
  left_join(village_last_day) %>%
  
  left_join(village_daily)




# saving output

hfc_sheet %>%
  
  sheet_write(data = village_final, sheet = "village_data")

1


########################################################################################################

## 2. District

# 2.1 Merging District-wise sampling data with HFC
# 

# 2.2 Creating dataset to use for exporting region wise stats
district <- sample_data %>%
  group_by(district) %>% # need to fill in villagecode
  summarize(total = n()) %>%
  ungroup() 

# data from survey hfc_constr %>% 

district_svy = hfc_constr %>% 
  select(-c(village,cell,district,sector)) %>% 
  mutate(ID_05_enter=paste0("'",ID_05_enter)) %>% 
  left_join(sample_data %>% select(headid,village,cell,sector,district),
            by=c('ID_05_enter'='headid')) %>% 
  group_by(district) %>% 
  mutate(n_subs=n(),
         complete     = sum(survey_complete, na.rm = TRUE)) %>% 
  mutate(attrition = sum(consent==0,na.rm=T)) %>% 
  select(district,n_subs,complete,attrition)

# final
district_final = district %>% 
  left_join(district_svy,by=c("district" = "district"
  )) %>% 
  distinct()

## daily
district_daily <- hfc_constr %>%
  group_by(across(c(district)), enddate) %>%
  count() %>%
  ungroup() %>%
  arrange(enddate) %>%
  pivot_wider(names_from = enddate, values_from = n)  
## last day
district_last_day <- hfc_constr %>%
  
  group_by(district) %>%
  
  filter(enddate == max((enddate), na.rm = TRUE)) %>%
  
  mutate(n = n()) %>%
  
  summarize(
    
    last_date       = unique(enddate),
    
    ld_survey_num   = first(n),#,#first(n, na.rm = TRUE),
    
    ld_complete        = sum(survey_complete, na.rm = TRUE)
    
  ) %>% select(district,last_date,ld_survey_num,ld_complete)


district_final <- district_final %>% 
  
  left_join(district_last_day) %>%
  
  left_join(district_daily) %>% 
  filter(district!='')

# save output

hfc_sheet %>%
  
  sheet_write(data = district_final, sheet = "district_data")

1



########################################################################################################

## 3. Cell
cell <- sample_data %>%
  group_by(district,sector,cell) %>% # need to fill in villagecode
  summarize(total = n()) %>%
  ungroup() 


# data from survey attrition = sum(consent==0,na.rm=T)
cell_svy = hfc_constr %>% 
  select(-c(village,cell,district,sector)) %>% 
  mutate(ID_05_enter=paste0("'",ID_05_enter)) %>% 
  left_join(sample_data %>% select(headid,village,cell,sector,district),
            by=c('ID_05_enter'='headid')) %>% 
  group_by(district,sector,cell) %>% 
  mutate(n_subs=n(),
         complete     = sum(survey_complete, na.rm = TRUE)) %>% #,
  mutate(attrition = sum(consent==0,na.rm=T)) %>% 
  select(district,sector,cell,n_subs,complete,attrition)

# final
cell_final = cell %>% 
  left_join(cell_svy,by=c("district" = "district",
                          "sector"="sector",
                          "cell"="cell"
  )) %>% 
  distinct()

## daily
cell_daily <- hfc_constr %>%
  group_by(across(c(district,sector,cell)), enddate) %>%
  count() %>%
  ungroup() %>%
  arrange(enddate) %>%
  pivot_wider(names_from = enddate, values_from = n)  
## last day
cell_last_day <- hfc_constr %>%
  group_by(district,sector,cell) %>%
  filter(enddate == max((enddate), na.rm = TRUE)) %>%
  mutate(n = n()) %>%
  summarize(
    
    last_date       = unique(enddate),
    
    ld_survey_num   = first(n),#,#first(n, na.rm = TRUE),
    
    ld_complete        = sum(survey_complete, na.rm = TRUE)
    
  ) %>% select(district,sector,cell,last_date,ld_survey_num,ld_complete)


cell_final <- cell_final %>% 
  left_join(cell_last_day) %>%
  left_join(cell_daily) %>% 
  filter(district!='')

# save output

hfc_sheet %>%
  
  sheet_write(data = cell_final, sheet = "cell_data")

1

########################################################################################################

## 4. Tracking Sheet



# Marking HHs surveyed
tracking_surveyed <- hfc_constr %>% 
  
  select(ID_05, ID_05_enter,startdate, ID_03,enumerator_name) %>% mutate(
    
    surveyed = "Surveyed"
    
  )



tracking <- sample_data %>% 
  
  
  rename(ID_05 = headid) %>% 
  
  group_by(ID_05)  %>%
  
  mutate(total = row_number()) %>%
  
  ungroup() %>%
  
  select(district, sector, cell, village, 
         
         
         ID_05,  total) %>%
  
  distinct() %>%
  
  left_join(tracking_surveyed, by = c("ID_05" = "ID_05")) %>%
  
  group_by(ID_05) %>%
  
  mutate_at(vars(matches("surveyed")),~replace(., is.na(.), "Not Surveyed") ) %>%  
  
  distinct(.) %>% 
  
  arrange(startdate, surveyed) 

# Exporting Tracking Sheet

hfc_sheet %>% 
  sheet_write(data = tracking, sheet = "track_data")

1