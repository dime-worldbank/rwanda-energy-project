########################################################################################################
#                                                                                                      #
#                                HIGH-FREQUENCY CHECKS  -- CONSTRUCT/CLEAN                             #
#                                                                                                      #
########################################################################################################


## PURPOSE      High-frequency checks

## AUTHOR      Xiaoming Zhang (adapted from Adrien Ciret & Marc-Andrea Fiorina & Juliana Guerrero)

## LAST UPDATE  March, 13th, 2024


########################################################################################################

## libraries

library(tidyverse)
library(lubridate)
library(googlesheets4)



# 1. Import Data ----
dropbox <- 'C:/Users/wb614406/Dropbox'

## Raw High Frequency Data (REMEMBER TO REENCRYPT)
raw <- read.csv(file.path(dropbox,
                           'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/REP_baseline_test_WIDE.csv'),
                 stringsAsFactors = FALSE)


# Variables submissiondate, starttime, endtime are recorded in dmy hms hence treated accordingly
date_variables_dmy <- raw %>%
  
  select(
    
    SubmissionDate, starttime, endtime
    
  )%>%
  
  names()

#Change date and timezone

raw <- raw %>%
  mutate(
    across(
      date_variables_dmy,
      
      ~ (mdy_hms(.,
                 
                 tz = Sys.timezone() ))))


# Module specific time stamps are recorded in ymd hms hence treated accordingly
date_variables_ymd <- raw %>%
  
  select(
    
    ends_with("_start"), starts_with("end")
    
  ) %>% names()


raw <- raw %>%
  
  mutate(across(date_variables_ymd,
                
                ~ (ymd_hms(.,
                           
                           tz = Sys.timezone() )
                   
                )))
#   

## 1. Overall Construction ----

hfc_constr <- raw #%>% filter(starttime >=as.Date("2021-07-08"))


## Date Stuff - extracting dates from date-time variable

hfc_constr <- hfc_constr %>%
  
  mutate(
    
    submissiondatetime     = SubmissionDate,
    
    submissiondate         = lubridate::date(submissiondatetime),
    
    startdate              = lubridate::date(starttime),
    
    enddate                = lubridate::date(endtime)
  ) 

## Enumerators----

enumerators <- read.csv(file.path(dropbox,
                                  "Rwanda Energy/questionnaires/cto attachments/pilot_enumerators.csv"))

# add enumerator name 
hfc_constr <- hfc_constr %>% 
  left_join(enumerators,by=c('enumerator'='enumeratorid_key'))


## Negative duration due to SCTO issues

hfc_constr <- hfc_constr %>%
  mutate(
    negative_duration = rowSums(select(., ends_with("duration")) < 0, na.rm = TRUE),
    negative_mods = NA_character_
  )


for(i in 1:nrow(hfc_constr)) {
  if(hfc_constr$negative_duration[i] > 0) {
    negative_modules <- hfc_constr %>%
      slice(i) %>%
      select(ends_with("duration") & which(. < 0)) %>%
      names() %>%
      str_to_upper() %>%
      paste(collapse =", ")
    hfc_constr$negative_mods[i] <- negative_modules
  }
  
}

  

hfc_constr <- hfc_constr %>%
  mutate(
    across(
      ends_with("duration"),
      ~ case_when(
        .x < 0 ~ NA_real_,
        TRUE   ~ as.numeric(.x)
      )
    )
  )


## Average Duration by Module Overall
duration_mods <- hfc_constr %>%
  select(SubmissionDate, district, sector, cell, village, enumerator, enumerator_key,  enumerator_other, ends_with("duration"), negative_mods) %>% #This is adding household ID number
  arrange(SubmissionDate) 



hfc_sheet <- googledrive::drive_get(paste0("HFC_REP_24"))
# In case googledrive function asks me to enter '1' to continue

1

hfc_sheet %>%
  
  sheet_write(data = duration_mods, sheet = "duration_data")

# In case googlesheets4 asks me to enter '1' to continue
1

## Marked Complete 
## Encoding Consent Variable - # Consent is imported as character type, encode Yes = 1 , No = 0
hfc_constr <- hfc_constr %>%
  mutate(survey_complete_c=ifelse(finish ==1,'Yes','No'),
         consent_c=ifelse(consent==1,'Yes','No'))

#Completion rate of each enumerator----

hfc_constr <- hfc_constr %>% 
  mutate(enumerator_key = ifelse(enumerator_key %in% "Other", enumerator_other, enumerator_key))

completion <- hfc_constr %>% 
  group_by(enumerator, enumerator_key, submissiondate) %>% 
  summarise(
    complete = sum(finish == 1),
    no_complete = sum(finish == 0),
    consent = sum(consent == 1),
    no_consent = sum(consent == 0)
  ) %>% 
  ungroup() %>% 
  arrange(submissiondate)
  


hfc_sheet %>%
  
  sheet_write(data = completion, sheet = "completion_data")

# In case googlesheets4 asks me to enter '1' to continue
1







########################################################################################################

## 5. Export Data duplicates files ----


duplicates <- hfc_constr %>% 
  filter(consent==1) %>% 
  group_by(hh_id) %>%  #household id
  mutate(n=n()) %>% 
  filter(n>1) %>% 
  select(enumerator,enumerator_key,district, sector, cell, village,hh_id, hh_id_confirm,
         starttime, submissiondate, n) %>% 
  filter(!is.na(hh_id_confirm))
  
  
  
  
hfc_sheet %>%
  sheet_write(data = duplicates, sheet = "duplicates")

1

# export duplicates
write.csv(duplicates,
          file.path(dropbox,
                    'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/duplicates_pilot.csv'),
          row.names=F)

write.csv(hfc_constr,
          file.path(dropbox,
                    'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/hfc_constr.csv'),
          row.names=F)

# export clean data
# write.csv(hfc_constr,
#           'C:/Users/wb605157/Dropbox/Rwanda Roads Data/Primary data/HH survey/endline/data/raw/hh_data_clean.csv',
#           row.names=F)
# 