date_variables_ymd <- raw %>%
select(
ends_with("_start"), starts_with("end")
) %>% names()
raw <- raw %>%
mutate(across(date_variables_ymd,
~ (ymd_hms(.,
tz = Sys.timezone() )
)))
#
## 1. Overall Construction ----
hfc_constr <- raw #%>% filter(starttime >=as.Date("2021-07-08"))
## Date Stuff - extracting dates from date-time variable
hfc_constr <- hfc_constr %>%
mutate(
submissiondatetime     = SubmissionDate,
submissiondate         = lubridate::date(submissiondatetime),
startdate              = lubridate::date(starttime),
enddate                = lubridate::date(endtime)
)
## Enumerators----
enumerators <- read.csv(file.path(dropbox,
"Rwanda Energy/questionnaires/cto attachments/pilot_enumerators.csv"))
# add enumerator name
hfc_constr <- hfc_constr %>%
left_join(enumerators,by=c('enumerator'='enumeratorid_key'))
## Negative duration due to SCTO issues
hfc_constr <- hfc_constr %>%
mutate(
negative_duration = rowSums(select(., ends_with("duration")) < 0, na.rm = TRUE),
negative_mods = NA_character_
)
for(i in 1:nrow(hfc_constr)) {
if(hfc_constr$negative_duration[i] > 0) {
negative_modules <- hfc_constr %>%
slice(i) %>%
select(ends_with("duration") & which(. < 0)) %>%
names() %>%
str_to_upper() %>%
paste(collapse =", ")
hfc_constr$negative_mods[i] <- negative_modules
}
}
hfc_constr <- hfc_constr %>%
mutate(
across(
ends_with("duration"),
~ case_when(
.x < 0 ~ NA_real_,
TRUE   ~ as.numeric(.x)
)
)
)
## Average Duration by Module Overall
duration_mods <- hfc_constr %>%
select(SubmissionDate, district, sector, cell, village, enumerator, enumerator_key,  enumerator_other, ends_with("duration"), negative_mods) %>% #This is adding household ID number
arrange(SubmissionDate)
hfc_sheet <- googledrive::drive_get(paste0("HFC_REP_24"))
# In case googledrive function asks me to enter '1' to continue
1
hfc_sheet %>%
sheet_write(data = duration_mods, sheet = "duration_data")
# In case googlesheets4 asks me to enter '1' to continue
1
completion <- hfc_constr %>%
group_by(enumerator, submissiondate) %>%
summarise(
complete = nrow(finish == 1),
no_complete = nrow(finish == 0),
consent = nrow(consent == 1),
no_consent = nrow(consent == 0)
)
completion <- hfc_constr %>%
group_by(enumerator, submissiondate) %>%
summarise(
complete = nrow(finish == 1),
no_complete = nrow(finish == 0),
consent = nrow(consent == 1),
no_consent = nrow(consent == 0)
) %>%
ungroup()
View(completion)
ries
ries
library(tidyverse)
library(lubridate)
library(googlesheets4)
# 1. Import Data ----
dropbox <- 'C:/Users/wb614406/Dropbox'
## Raw High Frequency Data (REMEMBER TO REENCRYPT)
raw <- read.csv(file.path(dropbox,
'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/REP_baseline_test_WIDE.csv'),
stringsAsFactors = FALSE)
# Variables submissiondate, starttime, endtime are recorded in dmy hms hence treated accordingly
date_variables_dmy <- raw %>%
select(
SubmissionDate, starttime, endtime
)%>%
names()
#Change date and timezone
raw <- raw %>%
mutate(
across(
date_variables_dmy,
~ (mdy_hms(.,
tz = Sys.timezone() ))))
# Module specific time stamps are recorded in ymd hms hence treated accordingly
date_variables_ymd <- raw %>%
select(
ends_with("_start"), starts_with("end")
) %>% names()
raw <- raw %>%
mutate(across(date_variables_ymd,
~ (ymd_hms(.,
tz = Sys.timezone() )
)))
#
## 1. Overall Construction ----
hfc_constr <- raw #%>% filter(starttime >=as.Date("2021-07-08"))
## Date Stuff - extracting dates from date-time variable
hfc_constr <- hfc_constr %>%
mutate(
submissiondatetime     = SubmissionDate,
submissiondate         = lubridate::date(submissiondatetime),
startdate              = lubridate::date(starttime),
enddate                = lubridate::date(endtime)
)
## Enumerators----
enumerators <- read.csv(file.path(dropbox,
"Rwanda Energy/questionnaires/cto attachments/pilot_enumerators.csv"))
# add enumerator name
hfc_constr <- hfc_constr %>%
left_join(enumerators,by=c('enumerator'='enumeratorid_key'))
## Negative duration due to SCTO issues
hfc_constr <- hfc_constr %>%
mutate(
negative_duration = rowSums(select(., ends_with("duration")) < 0, na.rm = TRUE),
negative_mods = NA_character_
)
for(i in 1:nrow(hfc_constr)) {
if(hfc_constr$negative_duration[i] > 0) {
negative_modules <- hfc_constr %>%
slice(i) %>%
select(ends_with("duration") & which(. < 0)) %>%
names() %>%
str_to_upper() %>%
paste(collapse =", ")
hfc_constr$negative_mods[i] <- negative_modules
}
}
hfc_constr <- hfc_constr %>%
mutate(
across(
ends_with("duration"),
~ case_when(
.x < 0 ~ NA_real_,
TRUE   ~ as.numeric(.x)
)
)
)
## Average Duration by Module Overall
duration_mods <- hfc_constr %>%
select(SubmissionDate, district, sector, cell, village, enumerator, enumerator_key,  enumerator_other, ends_with("duration"), negative_mods) %>% #This is adding household ID number
arrange(SubmissionDate)
hfc_sheet <- googledrive::drive_get(paste0("HFC_REP_24"))
# In case googledrive function asks me to enter '1' to continue
1
hfc_sheet %>%
sheet_write(data = duration_mods, sheet = "duration_data")
# In case googlesheets4 asks me to enter '1' to continue
1
## Marked Complete
## Encoding Consent Variable - # Consent is imported as character type, encode Yes = 1 , No = 0
hfc_constr <- hfc_constr %>%
mutate(survey_complete_c=ifelse(finish ==1,'Yes','No'),
consent_c=ifelse(consent==1,'Yes','No'))
#Completion rate of each enumerator----
completion <- hfc_constr %>%
group_by(enumerator, submissiondate) %>%
summarise(
complete = nrow(finish == 1),
no_complete = nrow(finish == 0),
consent = nrow(consent == 1),
no_consent = nrow(consent == 0)
) %>%
ungroup()
View(completion)
completion <- hfc_constr %>%
group_by(enumerator, submissiondate) %>%
summarise(
complete = sum(finish == 1),
no_complete = sum(finish == 0),
consent = sum(consent == 1),
no_consent = sum(consent == 0)
) %>%
ungroup()
completion <- hfc_constr %>%
group_by(enumerator, enumerator_other, enumerator_keysubmissiondate) %>%
summarise(
complete = sum(finish == 1),
no_complete = sum(finish == 0),
consent = sum(consent == 1),
no_consent = sum(consent == 0)
) %>%
ungroup()
completion <- hfc_constr %>%
group_by(enumerator, enumerator_other, enumerator_key, submissiondate) %>%
summarise(
complete = sum(finish == 1),
no_complete = sum(finish == 0),
consent = sum(consent == 1),
no_consent = sum(consent == 0)
) %>%
ungroup()
hfc_constr <- hfc_constr %>%
mutate(enumerator_key = ifelse(enumerator_key %in% "Other", enumerator_other, enumerator_key))
completion <- hfc_constr %>%
group_by(enumerator, enumerator_other, enumerator_key, submissiondate) %>%
summarise(
complete = sum(finish == 1),
no_complete = sum(finish == 0),
consent = sum(consent == 1),
no_consent = sum(consent == 0)
) %>%
ungroup()
completion <- hfc_constr %>%
group_by(enumerator, enumerator_key, submissiondate) %>%
summarise(
complete = sum(finish == 1),
no_complete = sum(finish == 0),
consent = sum(consent == 1),
no_consent = sum(consent == 0)
) %>%
ungroup()
completion <- hfc_constr %>%
group_by(enumerator, enumerator_key, submissiondate) %>%
summarise(
complete = sum(finish == 1),
no_complete = sum(finish == 0),
consent = sum(consent == 1),
no_consent = sum(consent == 0)
) %>%
ungroup() %>%
arrange(submissiondate)
hfc_sheet %>%
sheet_write(data = completion, sheet = "completion_data")
duplicates <- hfc_constr %>%
filter(consent==1) %>%
group_by(hh_id) %>%  #household id
mutate(n=n()) %>%
filter(n>1) %>%
select(enumerator,enumerator_key,district, sector, cell, village,
starttime, SubmissionDate, n) %>%
filter(!is.na(hh_id_confirm))
duplicates <- hfc_constr %>%
filter(consent==1) %>%
group_by(hh_id) %>%  #household id
mutate(n=n()) %>%
filter(n>1) %>%
select(enumerator,enumerator_key,district, sector, cell, village,hh_id, hh_id_confirm,
starttime, submissiondate, n) %>%
filter(!is.na(hh_id_confirm))
View(duplicates)
duplicates <- hfc_constr %>%
filter(consent==1) %>%
group_by(hh_id) %>%  #household id
mutate(n=n()) %>%
filter(n>1) %>%
select(enumerator,enumerator_key,district, sector, cell, village,hh_id, hh_id_confirm,
starttime, submissiondate, n) %>%
filter(!is.na(hh_id_confirm))
hfc_sheet %>%
sheet_write(data = duplicates, sheet = "duplicates")
1
dropbox <- 'C:/Users/wb614406/Dropbox'
## Raw High Frequency Data (REMEMBER TO REENCRYPT)
raw <- read.csv(file.path(dropbox,
'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/REP_baseline_test_WIDE.csv'),
stringsAsFactors = FALSE)
View(raw)
## Raw High Frequency Data (REMEMBER TO REENCRYPT)
raw <- read.csv(file.path(dropbox,
'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/REP_baseline_test_WIDE.csv'),
stringsAsFactors = FALSE)
View(raw)
raries
library(tidyverse)
library(lubridate)
library(googlesheets4)
# 1. Import Data ----
dropbox <- 'C:/Users/wb614406/Dropbox'
## Raw High Frequency Data (REMEMBER TO REENCRYPT)
raw <- read.csv(file.path(dropbox,
'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/REP_baseline_test_WIDE.csv'),
stringsAsFactors = FALSE)
# Variables submissiondate, starttime, endtime are recorded in dmy hms hence treated accordingly
date_variables_dmy <- raw %>%
select(
SubmissionDate, starttime, endtime
)%>%
names()
#Change date and timezone
raw <- raw %>%
mutate(
across(
date_variables_dmy,
~ (mdy_hms(.,
tz = Sys.timezone() ))))
# Module specific time stamps are recorded in ymd hms hence treated accordingly
date_variables_ymd <- raw %>%
select(
ends_with("_start"), starts_with("end")
) %>% names()
raw <- raw %>%
mutate(across(date_variables_ymd,
~ (ymd_hms(.,
tz = Sys.timezone() )
)))
#
## 1. Overall Construction ----
hfc_constr <- raw #%>% filter(starttime >=as.Date("2021-07-08"))
## Date Stuff - extracting dates from date-time variable
hfc_constr <- hfc_constr %>%
mutate(
submissiondatetime     = SubmissionDate,
submissiondate         = lubridate::date(submissiondatetime),
startdate              = lubridate::date(starttime),
enddate                = lubridate::date(endtime)
)
## Enumerators----
enumerators <- read.csv(file.path(dropbox,
"Rwanda Energy/questionnaires/cto attachments/pilot_enumerators.csv"))
# add enumerator name
hfc_constr <- hfc_constr %>%
left_join(enumerators,by=c('enumerator'='enumeratorid_key'))
## Negative duration due to SCTO issues
hfc_constr <- hfc_constr %>%
mutate(
negative_duration = rowSums(select(., ends_with("duration")) < 0, na.rm = TRUE),
negative_mods = NA_character_
)
for(i in 1:nrow(hfc_constr)) {
if(hfc_constr$negative_duration[i] > 0) {
negative_modules <- hfc_constr %>%
slice(i) %>%
select(ends_with("duration") & which(. < 0)) %>%
names() %>%
str_to_upper() %>%
paste(collapse =", ")
hfc_constr$negative_mods[i] <- negative_modules
}
}
hfc_constr <- hfc_constr %>%
mutate(
across(
ends_with("duration"),
~ case_when(
.x < 0 ~ NA_real_,
TRUE   ~ as.numeric(.x)
)
)
)
## Average Duration by Module Overall
duration_mods <- hfc_constr %>%
select(SubmissionDate, district, sector, cell, village, enumerator, enumerator_key,  enumerator_other, ends_with("duration"), negative_mods) %>% #This is adding household ID number
arrange(SubmissionDate)
hfc_sheet <- googledrive::drive_get(paste0("HFC_REP_24"))
# In case googledrive function asks me to enter '1' to continue
1
hfc_sheet %>%
sheet_write(data = duration_mods, sheet = "duration_data")
# In case googlesheets4 asks me to enter '1' to continue
1
## Marked Complete
## Encoding Consent Variable - # Consent is imported as character type, encode Yes = 1 , No = 0
hfc_constr <- hfc_constr %>%
mutate(survey_complete_c=ifelse(finish ==1,'Yes','No'),
consent_c=ifelse(consent==1,'Yes','No'))
#Completion rate of each enumerator----
hfc_constr <- hfc_constr %>%
mutate(enumerator_key = ifelse(enumerator_key %in% "Other", enumerator_other, enumerator_key))
completion <- hfc_constr %>%
group_by(enumerator, enumerator_key, submissiondate) %>%
summarise(
complete = sum(finish == 1),
no_complete = sum(finish == 0),
consent = sum(consent == 1),
no_consent = sum(consent == 0)
) %>%
ungroup() %>%
arrange(submissiondate)
hfc_sheet %>%
sheet_write(data = completion, sheet = "completion_data")
# In case googlesheets4 asks me to enter '1' to continue
1
########################################################################################################
## 5. Export Data duplicates files ----
duplicates <- hfc_constr %>%
filter(consent==1) %>%
group_by(hh_id) %>%  #household id
mutate(n=n()) %>%
filter(n>1) %>%
select(enumerator,enumerator_key,district, sector, cell, village,hh_id, hh_id_confirm,
starttime, submissiondate, n) %>%
filter(!is.na(hh_id_confirm))
hfc_sheet %>%
sheet_write(data = duplicates, sheet = "duplicates")
1
write.csv(hfc_constr,
file.path(dropbox,
'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/hfc_constr.csv'),
row.names=F)
# Save useful data
hfc_admin <- hfc_constr %>% select(starttime, endtime, submissiondate, enumerator, enumerator_key,
district, sector, cell, village, hh_id, hh_id_confirm, consent, finish, location,
#Duration
ends_with("duration"),
#household head roster
starts_with("A1"), hh_head_name, gender, marital, age_calculate, education, high_edu, employment, starts_with("A2"),
starts_with("A3"),
#energy wellbeing
starts_with("B4"), starts_with("B5"),
#housing assets
starts_with("C1"), starts_with("C2"), starts_with("C3"),
#business
starts_with("D1"), starts_with("D2"), starts_with("D3"),starts_with("D4"),
#savings
starts_with("E1"), formal_savings, informal_savings, starts_with("E2"), starts_with("E3"), starts_with("E4"),
# #mobile
# starts_with("F"),
#land and agriculture
starts_with("G"),
#Energy
starts_with("H"),
#clean_cooking
starts_with("I"),
#willingness
starts_with("J"),
#mental health
starts_with("B1"), starts_with("B2"), starts_with("B3"),
#desirability
starts_with("K")
)
View(hfc_admin)
village_final <- hfc_admin %>%
group_by(across(c(village,district,sector,cell))) %>%
summarize(total = n()) %>%
ungroup()
library(tidyverse)
library(lubridate)
library(googlesheets4)
dropbox <- 'C:/Users/wb614406/Dropbox'
hfc_constr <- read.csv(file.path(dropbox,
'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/hfc_constr.csv'),
stringAsFactors = FALSE)
## Raw High Frequency Data (REMEMBER TO REENCRYPT)
hfc_constr <- read.csv(file.path(dropbox,
'Rwanda Energy/datawork/RCT_data/baseline/data/HFC/hfc_constr.csv'),
)
View(hfc_constr)
hfc_admin <- hfc_constr %>% select(starttime, endtime, submissiondate, enumerator, enumerator_key,
district, sector, cell, village, hh_id, hh_id_confirm, consent, finish, location,
#Duration
ends_with("duration"),
#household head roster
starts_with("A1"), hh_head_name, gender, marital, age_calculate, education, high_edu, employment, starts_with("A2"),
starts_with("A3"),
#energy wellbeing
starts_with("B4"), starts_with("B5"),
#housing assets
starts_with("C1"), starts_with("C2"), starts_with("C3"),
#business
starts_with("D1"), starts_with("D2"), starts_with("D3"),starts_with("D4"),
#savings
starts_with("E1"), formal_savings, informal_savings, starts_with("E2"), starts_with("E3"), starts_with("E4"),
# #mobile
# starts_with("F"),
#land and agriculture
starts_with("G"),
#Energy
starts_with("H"),
#clean_cooking
starts_with("I"),
#willingness
starts_with("J"),
#mental health
starts_with("B1"), starts_with("B2"), starts_with("B3"),
#desirability
starts_with("K")
)
village_final <- hfc_admin %>%
group_by(across(c(village,district,sector,cell))) %>%
summarize(total = n()) %>%
ungroup()
View(village_final)
View(hfc_constr)
hfc_constr.test <- hfc_constr %>%
mutate(village = forcats::as.factor(village))
library(tidyverse)
library(lubridate)
library(googlesheets4)
hfc_constr.test <- hfc_constr %>%
mutate(village = forcats::as.factor(village))
# export clean data
# write.csv(hfc_constr,
#           'C:/Users/wb605157/Dropbox/Rwanda Roads Data/Primary data/HH survey/endline/data/raw/hh_data_clean.csv',
#           row.names=F)
library(forcats)
hfc_constr.test <- hfc_constr %>%
mutate(village = as.factor(village))
View(hfc_constr.test)
rm(hfc_constr.test)
