slice(i) %>%
select(ends_with("duration") & which(. < 0)) %>%
names() %>%
str_to_upper() %>%
paste(collapse =", ")
hfc_constr$negative_mods[i] <- negative_modules
}
}
hfc_constr <- hfc_constr %>%
mutate(
across(
ends_with("duration"),
~ case_when(
.x < 0 ~ NA_real_,
TRUE   ~ as.numeric(.x)
)
)
)
## Duration by Module Overall
duration_mods <- hfc_constr %>%
select(SubmissionDate, district, district_key, sector, sector_key, cell, cell_key, village, village_key, enumerator, enumerator_key,  enumerator_other,
survey_duration,
roster_duration,
energy_duration,
wellbeing_duration,
willingness_duration,
housing_assets_duration,
business_duration,
savings_duration,
mobile_duration,
livestock_duration,
cleancooking_duration,
mental_health_duration,
social_desirability_duration,
negative_mods) %>% #This is adding household ID number
arrange(SubmissionDate)
#Save duration
#google sheet version
hfc_sheet <- googledrive::drive_get(paste0("HFC_REP_24"))
hfc_sheet %>%
sheet_write(data = duration_mods, sheet = "duration_data")
# 4. Data duplicates files ----
duplicates <- hfc_constr %>%
filter(consent==1) %>%
group_by(hh_id) %>%  #household id
mutate(n=n()) %>%
filter(n>1) %>%
ungroup() %>%
select(enumerator,enumerator_key,district, district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, hh_head_name,A1_2, A1_3,
starttime, submissiondate, n) %>%
rename(
grid_connect = A1_2,
offgrid_connect = A1_3
) %>%
arrange(desc(hh_id))
hfc_sheet %>%
sheet_write(data = duplicates, sheet = "duplicates")
1
check <- hfc_constr %>%
filter(!is.na(A1_1))  %>%
distinct(hh_head_name, hh_id, A1_2, A1_3, .keep_all = TRUE)
check <- hfc_constr %>%
filter(!is.na(A1_1))
check <- hfc_constr %>%
filter(!is.na(A1_1))  %>%
distinct(hh_id, A1_2, A1_3, .keep_all = TRUE)
check <- hfc_constr %>%
filter(!is.na(A1_1))  %>%
distinct(hh_id, .keep_all = TRUE)
distinct(hh_id, .keep_all = TRUE
check <- hfc_constr %>%
check <- hfc_constr %>%
filter(!is.na(A1_1))  %>%
distinct(hh_id, .keep_all = TRUE)
hfc_constr <- hfc_constr %>%
filter(!is.na(A1_1))  %>%
distinct(hh_head_name, hh_id, A1_2, A1_3, .keep_all = TRUE)
View(hfc_constr)
View(duplicates)
hfc_constr <- hfc_constr %>%
filter(!is.na(A1_1) )  %>%
filter(!is.na(hh_head_name) )  %>%
distinct(hh_head_name, hh_id, A1_2, A1_3, .keep_all = TRUE)
hfc_constr <- hfc_constr %>%
filter(!is.na(A1_1) )  %>%
filter(!is.na(hh_head_name) )  %>%
distinct(hh_head_name, hh_id, A1_2, A1_3, .keep_all = TRUE)
sum(!is.na(hfc_constr$A1_1))
sum(!is.na(hfc_constr$raw))
sum(!is.na(raw$A1_1))
hfc_constr <- raw %>%
filter(starttime >= as.Date("2024-11-11"))
sum(!is.na(hfc_constr$A1_1))
hfc_constr <- hfc_constr %>%
mutate(
across(
where(is.numeric),
~ case_when(
.x %in% c(-66, -88, -77, -99) ~ NA_real_,
TRUE                     ~ .x
)
)
)
## Date construct
hfc_constr <- hfc_constr %>%
mutate(
submissiondatetime     = SubmissionDate,
submissiondate         = lubridate::date(submissiondatetime),
startdate              = lubridate::date(starttime),
enddate                = lubridate::date(endtime)
)
#Join enumerators
enumerators <- read.csv(file.path(dropbox,
"Rwanda Energy/EAQIP/questionnaires/cto attachments/pilot_enumerators.csv"))
# add enumerator name
hfc_constr <- hfc_constr %>%
left_join(enumerators,by=c('enumerator'='enumeratorid_key'))
##Village-key
village <- read.csv(file.path(
data_path, "admin_raw.csv"
))
village<- village %>%
select( ends_with("key")) %>%
select(-district_key)
hfc_constr <- left_join(hfc_constr, village, by = c("village" = "villageid_key",
"cell" = "cellid_key",
"sector" = "sectorid_key",
"district" = "districtid_key"))
# 2. Duration----
## Negative duration due to SCTO issues
hfc_constr <- hfc_constr %>%
mutate(
negative_duration = rowSums(select(., ends_with("duration")) < 0, na.rm = TRUE),
negative_mods = NA_character_
)
for(i in 1:nrow(hfc_constr)) {
if(hfc_constr$negative_duration[i] > 0) {
negative_modules <- hfc_constr %>%
slice(i) %>%
select(ends_with("duration") & which(. < 0)) %>%
names() %>%
str_to_upper() %>%
paste(collapse =", ")
hfc_constr$negative_mods[i] <- negative_modules
}
}
hfc_constr <- hfc_constr %>%
mutate(
across(
ends_with("duration"),
~ case_when(
.x < 0 ~ NA_real_,
TRUE   ~ as.numeric(.x)
)
)
)
## Duration by Module Overall
duration_mods <- hfc_constr %>%
select(SubmissionDate, district, district_key, sector, sector_key, cell, cell_key, village, village_key, enumerator, enumerator_key,  enumerator_other,
survey_duration,
roster_duration,
energy_duration,
wellbeing_duration,
willingness_duration,
housing_assets_duration,
business_duration,
savings_duration,
mobile_duration,
livestock_duration,
cleancooking_duration,
mental_health_duration,
social_desirability_duration,
negative_mods) %>% #This is adding household ID number
arrange(SubmissionDate)
#Save duration
#google sheet version
hfc_sheet <- googledrive::drive_get(paste0("HFC_REP_24"))
# In case googledrive function asks me to enter '1' to continue
1
hfc_sheet %>%
sheet_write(data = duration_mods, sheet = "duration_data")
# In case googlesheets4 asks me to enter '1' to continue
1
duplicates <- hfc_constr %>%
filter(consent==1) %>%
group_by(hh_id) %>%  #household id
mutate(n=n()) %>%
filter(n>1) %>%
ungroup() %>%
select(enumerator,enumerator_key,district, district_key, sector, sector_key, cell, cell_key, village, village_key, hh_id, hh_head_name,A1_2, A1_3,
starttime, submissiondate, n) %>%
rename(
grid_connect = A1_2,
offgrid_connect = A1_3
) %>%
arrange(desc(hh_id))
hfc_sheet %>%
sheet_write(data = duplicates, sheet = "duplicates")
1
dropbox <- 'C:/Users/wb614406/Dropbox'
## Raw High Frequency Data (REMEMBER TO REENCRYPT)
data_path <- file.path(
dropbox,
"Rwanda Energy/EAQIP/datawork/HFC/data"
)
output_path <- file.path(
dropbox,
"Rwanda Energy/EAQIP/datawork/HFC/output"
)
admin_raw <- read.csv(file.path(
data_path, "admin_raw.csv"
))
admin_raw <- admin_raw %>%
mutate(across(as.character()))
# Save useful data
hfc_admin <- hfc_constr %>% select(starttime, endtime, submissiondate, enumerator, enumerator_key,
district, sector, cell, village, hh_id, consent, finish, location,
#Duration
survey_duration,
roster_duration,
energy_duration,
wellbeing_duration,
willingness_duration,
housing_assets_duration,
business_duration,
savings_duration,
mobile_duration,
livestock_duration,
cleancooking_duration,
mental_health_duration,
social_desirability_duration,
all_duration,
#household head roster
starts_with("A1"), hh_head_name, gender, marital, head_age_calculate, education, high_edu,  starts_with("A2"),
starts_with("A3"),
#energy wellbeing
starts_with("B4"), starts_with("B5"),
#housing assets
starts_with("C1"), starts_with("C2"), starts_with("C3"),
#business
starts_with("D1"), starts_with("D2"), starts_with("D3"),starts_with("D4"),
#savings
starts_with("E1"), formal_savings, informal_savings, starts_with("E2"), starts_with("E3"), starts_with("E4"),
# #mobile
# starts_with("F"),
#land and agriculture
starts_with("G"),
#Energy
starts_with("H"),
#clean_cooking
starts_with("I"),
#willingness
starts_with("J"),
#mental health
starts_with("B1"), starts_with("B2"), starts_with("B3"),
#desirability
starts_with("K")
)
villageid_join <- admin_raw %>%
select(villageid_key, treatment)
hfc_admin <- left_join(hfc_admin, villageid_join, by = c("village" = "villageid_key"))
# write_xlsx(hfc_admin, path = file.path(data_path, "hfc_admin.xlsx"))
# write_xlsx(hfc_constr, path = file.path(data_path, "hfc_constr.xlsx"))
#
hfc_constr <- hfc_constr %>%
mutate(
finish = ifelse(is.na(A1_1), 0, finish)
)
#1. Village ----
# For each geographic/administrative unit (in this case, village), we want to check:
# Number of submissions
# Number of submissions per day
# Progress (%age of expected surveys completed)
##Submission by day----
village_check_by_day <- hfc_constr %>%
group_by(village, submissiondate) %>%
summarize(
num_surveys = n()
) %>%
ungroup() %>%
pivot_wider(
names_from = submissiondate,
values_from = num_surveys
) %>%
mutate(across(
-village,
~ ifelse(is.na(.x), 0, .x)
)) %>%
select(village, order(colnames(.)))
village_completion <- hfc_constr %>%
group_by(village) %>%
summarise(
attempt = n(),
complete = sum(finish == 1),
no_complete = sum(finish== 0),
no_locate = sum(locate ==0, na.rm = TRUE),
have_electricity = sum(A1_2 == 1 | A1_3 == 1, na.rm = TRUE),
other = no_complete - no_locate - have_electricity,
completion_rate = paste0(round(complete / attempt, 3) * 100, "%")
) %>%
ungroup()
village_check <- left_join(admin_raw, village_completion, by = c("villageid_key" = "village"))
village_check <- village_check%>%
mutate(
progress = paste0(round(complete / num_to_survey, 3) * 100, "%")
) %>%
left_join(village_check_by_day, by = c("villageid_key" = "village"))
village_check <- village_check %>%
mutate(
expected_complete = round(pmin(20, hh_head_06 * (complete / attempt)),2),
expected_attempt = round(expected_complete * (attempt / complete),2),
) %>%
relocate(expected_complete, expected_attempt, .after = complete)
village_check_district <- village_check %>%
mutate(
expected_complete_nomin= round(pmin(hh_head_06 * (complete / attempt)),2)
) %>%
group_by(district_key) %>%
summarise(
expected_complete_nomin = sum(expected_complete_nomin, na.rm = TRUE)
)
village_reached <- sum(!is.na(village_check$attempt))
# expected total completed = min(20, total households * (completed / attempts))
# expected total attempted = expected total completed * (attempts / completed)
#
# average across villages with >= 10 attempts
# fraction of villages with >= 10 attempts
attempt_10 <- village_check %>%
filter(attempt >= 10) %>%
mutate(
expected_complete = ifelse(is.na(expected_complete), 0, expected_complete)
)
mean(attempt_10$expected_complete, na.rm = TRUE)
mean(attempt_10$expected_attempt, na.rm = TRUE)
# saving output
hfc_sheet %>%
sheet_write(data = village_check, sheet = "village_data")
1
#2. Treatment completion----
treatment_completion <- village_check %>%
group_by(treatment) %>%
summarise(
num_to_survey = sum(num_to_survey, na.rm = TRUE),
attempt = sum(attempt, na.rm = TRUE),
complete = sum(complete, na.rm = TRUE),
no_complete = sum(no_complete, na.rm = TRUE),
no_locate = sum(no_locate, na.rm = TRUE),
have_electricity = sum(have_electricity, na.rm = TRUE),
other = no_complete - no_locate - have_electricity,
completion_rate = paste0(round(complete / attempt, 3) * 100, "%"),
progress = paste0(round(complete/num_to_survey, 3) * 100, "%")
) %>% t()
treatment_completion <- as.data.frame(treatment_completion) %>%
mutate(stats = rownames(treatment_completion)) %>%
select(stats, everything())
# saving output
hfc_sheet %>%
sheet_write(data = treatment_completion, sheet = "treatment_data")
1
# 3. District----
##Submission by day----
district_check_by_day <- hfc_constr %>%
group_by(districtid_key, submissiondate) %>%
summarize(
num_surveys = n()
) %>%
ungroup() %>%
pivot_wider(
names_from = submissiondate,
values_from = num_surveys
) %>%
mutate(across(
-districtid_key,
~ ifelse(is.na(.x), 0, .x)
)) %>%
select(districtid_key, order(colnames(.)))
##Checks----
# district_completion <- hfc_constr %>%
#   group_by(districtid_key) %>%
#   summarise(
#     attempt = n(),
#     complete = sum(finish == 1),
#     no_complete = sum(finish == 0),
#     consent = sum(consent == 1, na.rm = TRUE),
#     no_consent = sum(consent == 0, na.rm = TRUE),
#     completion_rate = paste0(round(complete / attempt, 3) * 100, "%"),
#     consent_rate = paste0(round(consent / attempt, 3) * 100, "%")
#   ) %>%
# ungroup()
district_completion <- hfc_constr %>%
group_by(districtid_key) %>%
summarise(
attempt = n(),
complete = sum(finish == 1),
no_complete = sum(finish== 0),
no_locate = sum(locate ==0, na.rm = TRUE),
have_electricity = sum(A1_2 == 1 | A1_3 == 1, na.rm = TRUE),
other = no_complete - no_locate - have_electricity,
completion_rate = paste0(round(complete / attempt, 3) * 100, "%")
) %>%
ungroup()
admin_district <- admin_raw %>%
group_by(
districtid_key, district_key
) %>%
summarise(
num_to_survey = sum(num_to_survey)
)
district_check <- left_join(district_completion,admin_district, by = c("districtid_key"))
district_check <- district_check%>%
select(districtid_key, district_key, num_to_survey, everything()) %>%
mutate(
progress = paste0(round(complete / num_to_survey, 3) * 100, "%")
) %>%
left_join(district_check_by_day)
# saving output
hfc_sheet %>%
sheet_write(data = district_check, sheet = "district_data")
1
daily_start <- hfc_constr %>%
group_by(startdate) %>%
summarise(
attempt = n(),
long = sum(finish == 1),
no_complete = sum(finish== 0),
no_locate = sum(locate ==0, na.rm = TRUE),
have_electricity = sum(A1_2 == 1 | A1_3 == 1, na.rm = TRUE),
other = no_complete - no_locate - have_electricity
) %>%
ungroup() %>%
mutate(
short = ifelse(startdate <= "2024-11-13", attempt - long, attempt - no_locate - long)
) %>%
select(startdate, attempt, long, short,no_locate, everything())
mean_attempt_enum <- hfc_constr %>%
group_by(enumerator, startdate) %>%
summarize(
num_attempted_surveys = n(),
.groups = 'drop'
) %>%
group_by(startdate) %>%
summarize(
mean_attempted_enumerator = round( mean(num_attempted_surveys), 2), # Calculate mean per enumerator
.groups = 'drop'
)
daily_start <- left_join(daily_start, mean_attempt_enum, by = c("startdate"))
mean_long_enum <- hfc_constr %>%
group_by(enumerator, startdate) %>%
summarize(
num_long_surveys = sum(finish == 1),
.groups = 'drop'
) %>%
group_by(startdate) %>%
summarize(
mean_long_enumerator = round( mean(num_long_surveys), 2), # Calculate mean per enumerator
.groups = 'drop'
)
daily_start <- left_join(daily_start, mean_long_enum, by = c("startdate"))
mean_short_enum <- hfc_constr %>%
group_by(enumerator, startdate) %>%
summarize(
attempt = n(),  # Calculate the total attempts
complete = sum(finish == 1, na.rm = TRUE),  # Completed surveys
no_locate = sum(locate == 0, na.rm = TRUE),  # No location
short = ifelse(startdate <= "2024-11-13", attempt - complete, attempt - no_locate - complete),
num_completed_surveys = complete,  # To calculate the mean later
.groups = 'drop'
) %>%
group_by(startdate) %>%
summarize(
mean_short_enumerator = round(mean(short, na.rm = TRUE), 2),  # Mean completed surveys per enumerator
.groups = 'drop'
)
daily_start <- left_join(daily_start, mean_short_enum, by = c("startdate"))
hfc_sheet %>%
sheet_write(data = daily_start, sheet = "daily_completion")
1
sum(hfc_constr$finish)
sum(!is.na(hfc_constr$A1_1))
village_reached <- sum(!is.na(village_check$attempt))
library(tidyverse)
library(lubridate)
library(googlesheets4)
library(writexl)
village_noreach <- village_check %>%
filter(is.na(village_check$attempt))
write_xlsx(village_noreach, path = file.path(data_path, "villages not reached baseline(03112025).xlsx"))
## libraries
library(tidyverse)
library(lubridate)
library(googlesheets4)
library(readxl)
library(dplyr)
library(tidyr)
rwa_villages <- st_read(dsn = file.path(data_path, "rwa_villages", "Village.shp"))
library(sf)
rwa_villages <- st_read(dsn = file.path(data_path, "rwa_villages", "Village.shp"))
View(rwa_villages)
three <- rwa_villages %>% filter(District %in% c("Gasabo", "Kicukiro", "Nyarugenge"))
View(three)
table(three$District)
n_distinct(three$Cell_ID)
View(admin_raw)
library("pacman")
install.packages("stargazer")
library("stargazer")
install.packages("modelsummary")
library(modelsummary)
pacman::p_load(fixest, tidyverse, here, readxl, writexl, janitor, haven, stringr, modelsummary)
#Read files----
rwa_long <- read_xlsx(path = here("data", "rwa_long.xlsx"))
ec_2023 <- read_dta(file = here("data","EC2023_Dataset.dta"))
