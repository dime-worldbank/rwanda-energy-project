########################################################################################################
#                                                                                                      #
#                     HIGH-FREQUENCY CHECKS  -- ADMINISTRATIVE-LEVEL HIGH-FREQUENCY CHECKS             #
#                                                                                                      #
########################################################################################################

## PURPOSE      Create one or multiple administrative-level check sheets in the HFC dashboard.
## District
## Villages
## Households

## AUTHOR      Xiaoming Zhang (adapted from Adrien Ciret & Marc-Andrea Fiorina & Juliana Guerrero)

## LAST UPDATE  April 16th , 2023

########################################################################################################

#Import Data ----
#


## libraries

library(tidyverse)
library(lubridate)
library(googlesheets4)
library(readxl)
library(dplyr)
library(tidyr)
library(writexl)

dropbox <- 'C:/Users/wb614406/Dropbox'

## Raw High Frequency Data (REMEMBER TO REENCRYPT)



admin_raw <- read.csv(file.path(
  data_path, "admin_raw.csv"
))

admin_raw <- admin_raw %>%
  mutate(across(as.character()))

villageid_join <- admin_raw %>%
  select(villageid_key, treatment)


hfc_constr <- hfc_constr %>%
  mutate(
    finish = ifelse(is.na(A1_1), 0, finish)
  ) %>%
  mutate(
    caseid = paste0(hh_head_name, hh_id, A1_2, A1_3)
  )




not_eligible <- hfc_constr %>%
  filter(submissiondate >= Sys.Date() ) %>%
  select(
    submissiondate, enumerator, enumerator_key,
    district_key, sector_key, cell_key, village_key,
    village, hh_id,consent, locate, hh_head_name, phonenumber, second_phonenumber,
    A1_2, A1_2_3month, A1_3, A1_1
    ) %>% 
  filter(is.na(A1_1))


write_xlsx(not_eligible,
           path = file.path(output_path, paste0("hh_not_eligible" , Sys.Date(), ".xlsx")))


#Surveyed today------
surveyed_today <-  hfc_constr %>%
  filter(submissiondate >= Sys.Date() ) %>%
  select(
    submissiondate, enumerator, enumerator_key,
    district_key, sector_key, cell_key, village_key,
    village, hh_id,consent, locate, hh_head_name, phonenumber, second_phonenumber,
    A1_2, A1_2_3month, A1_3, A1_1
  ) 

write_xlsx(surveyed_today,
           path = file.path(output_path, paste0("hh_surveyed" , Sys.Date(), ".xlsx")))

surveyed_0720 <-  hfc_constr %>%
  filter(submissiondate == "2025-07-20" ) %>%
  select(
    submissiondate, enumerator, enumerator_key,
    district_key, sector_key, cell_key, village_key,
    village, hh_id,consent, locate, hh_head_name, phonenumber, second_phonenumber,
    A1_2, A1_2_3month, A1_3, A1_1
  ) 

write_xlsx(surveyed_0720,
           path = file.path(output_path, paste0("hh_surveyed2025-07-20" , ".xlsx")))


surveyed_0719 <-  hfc_constr %>%
  filter(submissiondate == "2025-07-19" ) %>%
  select(
    submissiondate, enumerator, enumerator_key,
    district_key, sector_key, cell_key, village_key,
    village, hh_id,consent, locate, hh_head_name, phonenumber, second_phonenumber,
    A1_2, A1_2_3month, A1_3, A1_1
  ) 

write_xlsx(surveyed_0719,
           path = file.path(output_path, paste0("hh_surveyed2025-07-19" , ".xlsx")))


today_not_located <-hfc_constr %>%
  filter(submissiondate >= Sys.Date()) %>%
  select(
    submissiondate, enumerator, enumerator_key,
    district_key, sector_key, cell_key, village_key,
    village, hh_id,consent, locate, nolocate, nolocate_other, hh_head_name, phonenumber, second_phonenumber,
    A1_2, A1_2_3month, A1_3, A1_1, comment
  ) %>% 
  filter(
    is.na(A1_1) & locate == 0
  )

write_xlsx(today_not_located,
           path = file.path(output_path, paste0("hh_not_located" , Sys.Date() ,  "_weekend", ".xlsx")))



all_notlocat <- hfc_constr %>%
  filter(submissiondate >="2025-07-14") %>%
  select(
    submissiondate, enumerator, enumerator_key,
    district_key, sector_key, cell_key, village_key,
    village, hh_id,consent, locate, nolocate, nolocate_other, hh_head_name, phonenumber, second_phonenumber,
    A1_2, A1_2_3month, A1_3, A1_1, comment
  ) %>% 
  filter(
    is.na(A1_1) & locate == 0
  )

hfc_sheet %>% 
  sheet_write(
    data = all_notlocat,
    sheet = "Mop up not located"
  )

write_xlsx(all_notlocat,
           path = file.path(output_path, paste0("hh_not_located" ,  ".xlsx")))






# write_xlsx(phone_number,
#            path = file.path(output_path, "hh_surveyed(07112025).xlsx"))
#1. Village ----

# For each geographic/administrative unit (in this case, village), we want to check:
# Number of submissions
# Number of submissions per day
# Progress (%age of expected surveys completed)

##Submission by day----
village_check_by_day <- hfc_constr %>%
  group_by(village, submissiondate) %>%
  summarize(
    num_surveys = n()
  ) %>%
  ungroup() %>%
  pivot_wider(
    names_from = submissiondate,
    values_from = num_surveys
  ) %>%
  mutate(across(
    -village,
    ~ ifelse(is.na(.x), 0, .x)
  )) %>%
  select(village, order(colnames(.)))


complete <- hfc_constr %>%
  filter(finish == 1) %>%
  filter(consent == 1) %>%
  filter(!is.na(A1_1)) %>%
  distinct(hh_head_name, hh_id, A1_2, A1_3, .keep_all = TRUE)

ruvumba <- hfc_constr %>% 
  filter(village == "41170506" & hh_id == "411705060486")


write_xlsx(ruvumba,
           path = file.path(output_path, "ruvumba(411705060486).xlsx"))


data_path_2 <- file.path(
  dropbox,
  "Rwanda Energy/EAQIP/datawork/RCT_data/baseline/data/Updated scope villages& households"
)





complete_save <- complete %>%
  select(hh_id) %>%
  mutate(
    `Completed Second Round` = "Yes"
  )

write_xlsx(complete_save,
           path = file.path(data_path_2, "completed_second_round.xlsx"))

write_xlsx(hfc_constr,
           path = file.path(data_path_2, "hfc_constr_secondround.xlsx"))



village_completion <- hfc_constr %>%
  group_by(village) %>%
  summarise(
    attempt = n(),
    complete = sum( caseid %in% complete$caseid, na.rm = TRUE),
    no_complete = sum(finish== 0),
    no_locate = sum(locate ==0, na.rm = TRUE),
    have_electricity = sum(A1_2 == 1 | A1_3 == 1, na.rm = TRUE),
    completion_rate_secondround = paste0(round(complete / attempt, 3) * 100, "%")
  ) %>%
  ungroup()


village_check <- left_join(admin_raw, village_completion, by = c("villageid_key" = "village"))

village_check <- village_check%>%
  left_join(village_check_by_day, by = c("villageid_key" = "village"))


#Join with first round and limit to 181 villages

complete_first <- read_xlsx(path = file.path(data_path_2, "vulnerable households in sample villages.xlsx")) %>%
  filter(`In Fully Completed village` == "Yes")

complete_status <- read_xlsx(path = file.path(data_path_2, "vulnerable households in sample villages.xlsx")) 

first_round <- read_xlsx(path = file.path(data_path_2, "vulnerable households in sample villages.xlsx")) %>%
 group_by(villageid_key) %>% 
   summarise(
    firstround_attempt = sum(`Approached by Lattanzio` == "Yes"),
    firstround_complete = sum(`Completed by Lattanzio` == "Yes")
  ) %>%
  select(
    villageid_key, firstround_attempt, firstround_complete
  ) %>% 
  mutate(
    villageid_key = as.numeric(villageid_key)
  )


village_check <- left_join(village_check, first_round, by = c("villageid_key" ))

#Eligible households in second round----

eligible_households <- read_xlsx(path = file.path(data_path_2, "Eligible_households.xlsx")) %>%
  distinct(hh_id, .keep_all = TRUE) %>% 
  group_by(village) %>%
  summarise(
    n_eligible = n()
  ) %>%
  mutate(village = as.numeric(village))  

village_check <- left_join(village_check, eligible_households, by = c("villageid_key" = "village"))


deployment_list <- read.csv(file.path(data_path, "household_head.csv"))


screening_survey <- read_xlsx(path= file.path(data_path_2, "screening_survey.xlsx")) %>%
  mutate(village = as.numeric(village)) %>%
  filter(hh_id %in% deployment_list$household_id)


screened_households <- read_xlsx(path= file.path(data_path_2, "screening_survey.xlsx")) %>%
  mutate(village = as.numeric(village)) %>%
  filter(hh_id %in% deployment_list$household_id) %>%
  group_by(village) %>%
  summarise(hh_screened = n())

village_check <- left_join(village_check, screened_households, by = c("villageid_key" = "village"))


village_check <- village_check %>%
  mutate(
    complete = ifelse(is.na(complete),  0, complete),
    attempt = ifelse(is.na(attempt), 0, attempt),
    hh_screened = ifelse(is.na(hh_screened), 0, hh_screened)
  ) %>%
  mutate(
    complete_all = rowSums(
      select(., complete, firstround_complete),
      na.rm = TRUE
    )
  ) %>%
  mutate(
    progress = paste0(round(complete_all / num_to_survey, 3) * 100, "%")
  ) %>%
  filter(
    villageid_key %in% village_181$villageid_key
  ) %>%
  mutate(
    no_complete_village = ifelse(complete_all < 20 & attempt < n_eligible, 1, 0),
    no_complete_village = ifelse(villageid_key %in% complete_first$villageid_key, 0, no_complete_village), 
    first_round_complete_village = ifelse(villageid_key %in% complete_first$villageid_key, 1, 0)
    ) %>%
  select(
    X, provinceid_key, province_key, districtid_key, district_key, sectorid_key, sector_key, cellid_key, cell_key,
    villageid_key, village_key, treatment, hh_head_06, num_to_survey, n_eligible, hh_screened, attempt,
    complete, firstround_attempt, firstround_complete, complete_all,no_complete_village,  first_round_complete_village,
    completion_rate_secondround, progress, no_complete, no_locate,
    have_electricity, everything()
  )


#No complete households-------

no_complete <- village_check %>%
  filter(
    no_complete_village == 1
  ) %>%
  select(
    province_key,district_key,  sector_key,  cell_key,
    villageid_key, village_key, treatment, hh_head_06, hh_screened, firstround_attempt,  n_eligible, attempt, complete_all
  ) %>%
  rename(
    `Second round attempt` = attempt,
    `Completed total(with first round)`= complete_all
  ) %>% 
  mutate(
    `To be surveyed` = n_eligible - `Second round attempt`
  )



eligible_households <- read_xlsx(path = file.path(data_path_2, "Eligible_households.xlsx"))

additional_survey <- eligible_households %>%
  filter(
    village %in% no_complete$villageid_key
  ) %>%
  filter(
    !hh_id %in% hfc_constr$hh_id
  )





hfc_sheet %>%
  sheet_write(
    data = no_complete,
    sheet = "no_complete_village"
  )

hfc_sheet %>%
  sheet_write(
    data = additional_survey,
    sheet = "no_complete_households"
  )

list_to_write <- list(
  "No complete village" = no_complete,
  "households" = additional_survey
)

write_xlsx(list_to_write, path = file.path(output_path, "Not complete village_0718.xlsx"))


# 
# Not reached households-----
# Did not screen or attempt in second round

not_reached_village <- village_check %>%
  filter(is.na(no_complete_village)& is.na(n_eligible)) %>%
  filter(hh_screened == 0 & attempt == 0) %>%
  mutate(
    to_be_reached = hh_head_06 - firstround_attempt
  ) %>%
  select(
    district_key, districtid_key, sector_key, sectorid_key, cell_key, cellid_key,
    village_key, villageid_key, treatment, hh_head_06,  hh_screened, firstround_attempt, to_be_reached
  )  %>%
  filter(to_be_reached > 0)

deployment_list <- deployment_list %>% 
 mutate(
   household_id == as.character(household_id)
  )

not_reached_household <- deployment_list %>%
  filter(
    villageid_key %in% not_reached_village$villageid_key
  ) %>% select(-code)


hfc_sheet %>% 
  sheet_write(
    data = not_reached_village,
    sheet = "Not reached village(second round)"
  )

hfc_sheet %>% 
  sheet_write(
    data = not_reached_household,
    sheet = "Not reached household(second round)"
  )

list_to_write <- list(
  "not reached village" = not_reached_village,
  "households" = not_reached_household
)

write_xlsx(list_to_write, path = file.path(output_path, "Not reached village(second round).xlsx"))














# saving output

hfc_sheet %>%

  sheet_write(data = village_check, sheet = "village_data")

1



#2. Treatment completion----

treatment_completion <- village_check %>%
  group_by(treatment) %>%
  summarise(
    num_to_survey = sum(num_to_survey, na.rm = TRUE),
    complete_all = sum(complete_all, na.rm = TRUE)
  ) %>%
  mutate(
    progress = paste0(round(complete_all/num_to_survey, 3) * 100, "%")
  )

treatment_completion <- as.data.frame(treatment_completion) %>%
  mutate(stats = rownames(treatment_completion)) %>%
  select(stats, everything())

# saving output

hfc_sheet %>%

  sheet_write(data = treatment_completion, sheet = "treatment_data")

1



# 3. District----
##Submission by day----
district_check_by_day <- hfc_constr %>%
  group_by(districtid_key, submissiondate) %>%
  summarize(
    num_surveys = n()
  ) %>%
  ungroup() %>%
  pivot_wider(
    names_from = submissiondate,
    values_from = num_surveys
  ) %>%
  mutate(across(
    -districtid_key,
    ~ ifelse(is.na(.x), 0, .x)
  )) %>%
  select(districtid_key, order(colnames(.)))


##Checks----



district_check<- village_check %>%
  group_by(districtid_key, district_key) %>%
  summarise(
    num_to_survey = sum(num_to_survey, na.rm = TRUE),
    attempt = sum(attempt, na.rm = TRUE),
    complete = sum(complete, na.rm = TRUE),
    firstround_complete = sum(firstround_complete, na.rm = TRUE),
    complete_all = sum(complete_all, na.rm = TRUE),
    completion_rate_secondround = paste0(round(complete / attempt, 3) * 100, "%")
  ) %>%
  ungroup()


district_check <- district_check%>%
  select(districtid_key, district_key, num_to_survey, everything()) %>%
  mutate(
    progress = paste0(round(complete_all / num_to_survey, 3) * 100, "%")
  ) %>%
  left_join(district_check_by_day)




# saving output

hfc_sheet %>%

  sheet_write(data = district_check, sheet = "district_data")

1




