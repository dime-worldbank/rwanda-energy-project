sector = sector.x,
cell = cell.x,
village = village.x
) %>%
select(village_id, district, sector, cell, village)
View(rulindo_na_join)
View(rulindo_non_na)
rulindo_na <- rulindo_head_new %>%
filter(is.na(village_id))
rulindo_na <- stringdist_left_join(rulindo_na, rulindo_villages, by = c("district", "sector", "cell", "village"), max_dist = 2)
sum(is.na(rulindo_na$village_id.y))
rulindo_non_na_join <- rulindo_id %>%
filter(!is.na(village_id)) %>%
clean_names() %>%
select(
village_id, district, sector, cell, village, name, gender, nid
)
rulindo_na_join <- rulindo_na %>%
filter(!is.na(village_id.y)) %>%
rename(
village_id = village_id.y,
district = district.x,
sector = sector.y,
cell = cell.y,
village = village.y
) %>%
select(village_id, district, sector, cell, village, name, gender, nid)
rulindo_na_join <- rulindo_na %>%
filter(!is.na(village_id.y)) %>%
clean_names() %>%
rename(
village_id = village_id.y,
district = district.x,
sector = sector.y,
cell = cell.y,
village = village.y
) %>%
select(village_id, district, sector, cell, village, name, gender, nid)
rulindo_na <- rulindo_head_new %>%
filter(is.na(village_id))
rulindo_villages <- village_join %>%
filter(district %in% "Rulindo")
# rulindo_na <- rulindo_id  %>%
#   filter(is.na(village_id))
library(fuzzyjoin)
rulindo_na <- stringdist_left_join(rulindo_na, rulindo_villages, by = c("district", "sector", "cell", "village"), max_dist = 2)
rulindo_na_join <- rulindo_na %>%
filter(!is.na(village_id.y)) %>%
rename(
village_id = village_id.y,
district = district.x,
sector = sector.y,
cell = cell.y,
village = village.y
) %>%
clean_names() %>%
select(village_id, district, sector, cell, village, name, gender, nid)
rulindo_non_na_join <- rulindo_id %>%
filter(!is.na(village_id)) %>%
clean_names() %>%
select(
village_id, district, sector, cell, village, name, gender, nid
)
rulindo_hh <- bind_rows(rulindo_non_na_join, rulindo_na_join)
rulindo_head_new <- read_xlsx(path = file.path (data_path, "hh_head", "RULINDO_final.xlsx"))
rulindo_head_new <- rulindo_head_new %>%
mutate(across(everything(), ~ str_to_title(.))) %>%
mutate(district = "Rulindo")
rulindo_head_new <- left_join(rulindo_head_new, village_join, by = c("district", "sector", "cell", "village"))
rulindo_na <- rulindo_head_new %>%
filter(is.na(village_id))
rulindo_villages <- village_join %>%
filter(district %in% "Rulindo")
library(fuzzyjoin)
rulindo_na <- stringdist_left_join(rulindo_na, rulindo_villages, by = c("district", "sector", "cell", "village"), max_dist = 2)
rulindo_na_join <- rulindo_na %>%
filter(!is.na(village_id.y)) %>%
rename(
village_id = village_id.y,
district = district.x,
sector = sector.y,
cell = cell.y,
village = village.y
) %>%
clean_names() %>%
select(village_id, district, sector, cell, village, name, gender, nid)
rulindo_non_na_join <- rulindo_id %>%
filter(!is.na(village_id)) %>%
clean_names() %>%
select(
village_id, district, sector, cell, village, name, gender, nid
)
rulindo_hh <- bind_rows(rulindo_non_na_join, rulindo_na_join)
rulindo_non_na_join <- rulindo_head_new%>%
filter(!is.na(village_id)) %>%
clean_names() %>%
select(
village_id, district, sector, cell, village, name, gender, nid
)
rulindo_hh <- bind_rows(rulindo_non_na_join, rulindo_na_join)
sum(is.na(rulindo_hh))
sum(is.na(rulindo_hh$village_id))
rulindo_hh_join <- rulindo_hh %>%
group_by(village_id) %>%
mutate(
hh_06 = n()
)
rulindo_hh_join <- rulindo_hh %>%
group_by(village_id) %>%
summarise(
hh_06 = n()
)
View(rulindo_hh)
View(four_district)
four_district_2406 <- left_join(four_district, rulindo_hh_join, by = c("village_id"))
View(four_scope_2405.1)
View(four_district_2406)
rulindo_hh_join <- rulindo_hh %>%
group_by(village_id) %>%
summarise(
hh__head_06 = n()
)
four_district_2406 <- left_join(four_district, rulindo_hh_join, by = c("village_id"))
rulindo_hh_join <- rulindo_hh %>%
group_by(village_id) %>%
summarise(
hh_head_06 = n()
)
four_district_2406 <- left_join(four_district, rulindo_hh_join, by = c("village_id"))
four_district_2406 <- four_district_2406 %>%
mutate(
hh_head_06 = ifelse(is.na(hh_head_06), hh_head_05, hh_head_06)
)
write_xlsx(four_district_2406, path = file.path(data_path, "four_district_2406.xlsx"))
View(rulindo_hh)
rulindo_head_join <- rulindo_hh %>%
clean_names() %>%
select(district, sector, cell, village, name, gender, nid, village_id) %>%
mutate(
code = NA,
last_name = str_extract(name, "^[^\\s]+"),  # Extracts the first word (last name)
first_name = str_trim(str_replace(name, "^[^\\s]+\\s+", ""))  # Removes the first word and space to get the rest (first name)
)
View(rulindo_head_join)
rulindo_head_join <- rulindo_hh %>%
clean_names() %>%
select(district, sector, cell, village, name, gender, nid, village_id) %>%
mutate(
code = NA,
last_name = str_extract(name, "^[^\\s]+"),  # Extracts the first word (last name)
first_name = str_trim(str_replace(name, "^[^\\s]+\\s+", "")) ,
gender = ifelse(gender %in% c("M"), male, female))
rulindo_head_join <- rulindo_hh %>%
clean_names() %>%
select(district, sector, cell, village, name, gender, nid, village_id) %>%
mutate(
code = NA,
last_name = str_extract(name, "^[^\\s]+"),  # Extracts the first word (last name)
first_name = str_trim(str_replace(name, "^[^\\s]+\\s+", "")) ,
gender = ifelse(gender %in% c("M"), "male", "female"))
rulindo_head_join <- rulindo_hh %>%
clean_names() %>%
select(district, sector, cell, village, name, gender, nid, village_id) %>%
mutate(
code = NA,
last_name = str_extract(name, "^[^\\s]+"),  # Extracts the first word (last name)
first_name = str_trim(str_replace(name, "^[^\\s]+\\s+", "")) ,
gender = ifelse(gender %in% c("M"), "male", "female")) %>%
select(district, sector, cell, village, first_name, last_name, gender, nid, village_id) %>%
group_by(village_id) %>%
summarise(
hh_head_06 = n()
)
rulindo_head_join <- rulindo_hh %>%
clean_names() %>%
select(district, sector, cell, village, name, gender, nid, village_id) %>%
mutate(
code = NA,
last_name = str_extract(name, "^[^\\s]+"),  # Extracts the first word (last name)
first_name = str_trim(str_replace(name, "^[^\\s]+\\s+", "")) ,
gender = ifelse(gender %in% c("M"), "male", "female")) %>%
select(district, sector, cell, village, first_name, last_name, gender, nid, village_id)
head_join <- rbind(karongi_head_join.1, rulindo_head_join, rutsiro_head_join, rusizi_head_join)
View(rutsiro_head_join)
rulindo_head_join <- rulindo_hh %>%
clean_names() %>%
select(district, sector, cell, village, name, gender, nid, village_id) %>%
mutate(
code = NA,
last_name = str_extract(name, "^[^\\s]+"),  # Extracts the first word (last name)
first_name = str_trim(str_replace(name, "^[^\\s]+\\s+", "")) ,
gender = ifelse(gender %in% c("M"), "male", "female")) %>%
select(district, sector, cell, village, code, first_name, last_name, gender, nid, village_id)
head_join <- rbind(karongi_head_join.1, rulindo_head_join, rutsiro_head_join, rusizi_head_join)
nrow(head_join ) == n_distinct(head_join$nid)
filter_rulindo <- rulindo_head_join %>%
group_by(nid) %>%
summarise(
n = n()
) %>%
filter( n >2)
View(filter_rulindo)
filter_rulindo <- filter_rulindo %>%
filter(nid %in% filter_rulindo$nid)
filter_rulindo <- rulindo_head_join %>%
group_by(nid) %>%
summarise(
n = n()
) %>%
filter( n >2)
rulindo_check <- filter_rulindo %>%
filter(nid %in% filter_rulindo$nid)
View(rulindo_check)
rulindo_check <- rulindo_head_join %>%
filter(nid %in% filter_rulindo$nid)
# Identify NIDs with more than one occurrence
filter_rulindo <- rulindo_head_join %>%
group_by(nid) %>%
summarise(n = n()) %>%
filter(n > 1)
# Filter the main data frame to keep only those NIDs with duplicates
rulindo_check <- rulindo_head_join %>%
filter(nid %in% filter_rulindo$nid)
# For those duplicates, keep only rows with distinct last_name
rulindo_distinct <- rulindo_check %>%
group_by(nid, last_name) %>%
filter(!duplicated(last_name)) %>%
ungroup()
# Append rows that are not duplicates (nids with no duplicates)
rulindo_non_duplicates <- rulindo_head_join %>%
filter(!nid %in% filter_rulindo$nid)
View(rulindo_distinct)
write_xlsx(rulindo_check, path = file.path(data_path, "rulindo_check.xlsx"))
# Filter the main data frame to keep only those NIDs with duplicates
rulindo_check <- rulindo_head_join %>%
filter(nid %in% filter_rulindo$nid)
# For those duplicates, keep only rows with distinct last_name
rulindo_check <- rulindo_check %>%
group_by(nid, last_name) %>%
filter(!duplicated(last_name)) %>%
ungroup()
#Further clean in excel
write_xlsx(rulindo_check, path = file.path(data_path, "rulindo_check.xlsx"))
# For those duplicates, keep only rows with distinct last_name
rulindo_distinct <- rulindo_check %>%
group_by(nid) %>%
filter(!duplicated(last_name) | !last_name %in% first_name | !duplicate(first_name)) %>%
ungroup()
# For those duplicates, keep only rows with distinct last_name
rulindo_distinct <- rulindo_check %>%
group_by(nid) %>%
filter(!duplicated(last_name) | !last_name %in% first_name | !duplicated(first_name)) %>%
ungroup()
View(rulindo_distinct)
# For those duplicates, keep only rows with distinct last_name
rulindo_distinct <- rulindo_check %>%
group_by(nid) %>%
filter(!duplicated(last_name) | !duplicated(first_name)) %>%
ungroup()
df <- df %>%
filter(!(last_name %in% match_rows$last_name & first_name %in% match_rows$first_name & duplicated(first_name)))
filter_logic <- function(df) {
match_rows <- df %>%
filter(last_name %in% df$first_name)
if (nrow(match_rows) > 0) {
df <- df %>%
filter(!(last_name %in% match_rows$last_name & first_name %in% match_rows$first_name & duplicated(first_name)))
}
return(df)
}
rulindo_distinct <- rulindo_distinct %>%
group_by(nid) %>%
group_modify(~ filter_logic(.x)) %>%
ungroup()
rulindo_distinct <- rulindo_check %>%
group_by(nid) %>%
filter(!duplicated(last_name) | !duplicated(first_name)) %>%
ungroup()
rulindo_distinct <- rulindo_distinct %>%
mutate(
name = past0(last_name, first_name)
)
rulindo_distinct <- rulindo_check %>%
group_by(nid) %>%
filter(!duplicated(last_name) | !duplicated(first_name)) %>%
ungroup()
rulindo_distinct <- rulindo_distinct %>%
mutate(
name = paste0(last_name, first_name)
)
# Function to check if two strings are anagrams
are_anagrams <- function(string1, string2) {
identical(sort(unlist(strsplit(string1, NULL))), sort(unlist(strsplit(string2, NULL))))
}
# Custom function to filter names that are anagrams within each nid group
filter_anagrams <- function(df) {
# Create a logical vector to keep track of which rows to keep
keep <- rep(TRUE, nrow(df))
# Compare each name with every other name in the group
for (i in 1:(nrow(df) - 1)) {
for (j in (i + 1):nrow(df)) {
if (are_anagrams(df$name[i], df$name[j])) {
keep[j] <- FALSE
}
}
}
return(df[keep, ])
}
# Apply the custom filtering function to each nid group
rulindo_distinct <- rulindo_distinct %>%
group_by(nid) %>%
group_modify(~ filter_anagrams(.x)) %>%
ungroup()
# Append rows that are not duplicates (nids with no duplicates)
rulindo_non_duplicates <- rulindo_head_join %>%
filter(!nid %in% filter_rulindo$nid)
View(filter_karongi)
filter_karongi <- karongi_head_join.1 %>%
group_by(code) %>%
summarise(
n = n()
) %>%
filter(n >2)
# Combine the results
rulindo_head_join.1 <- bind_rows(rulindo_non_duplicates, rulindo_distinct)
rulindo_head_join <- rulindo_hh %>%
clean_names() %>%
select(district, sector, cell, village, name, gender, nid, village_id) %>%
mutate(
code = NA,
last_name = str_extract(name, "^[^\\s]+"),  # Extracts the first word (last name)
first_name = str_trim(str_replace(name, "^[^\\s]+\\s+", "")) ,
gender = ifelse(gender %in% c("M"), "male", "female")) %>%
select(district, sector, cell, village, code, first_name, last_name, gender, nid, village_id)
# Identify NIDs with more than one occurrence
filter_rulindo <- rulindo_head_join %>%
group_by(nid) %>%
summarise(n = n()) %>%
filter(n > 1)
# Filter the main data frame to keep only those NIDs with duplicates
rulindo_check <- rulindo_head_join %>%
filter(nid %in% filter_rulindo$nid)
# For those duplicates, keep only rows with distinct last_name
rulindo_distinct <- rulindo_check %>%
group_by(nid) %>%
filter(!duplicated(last_name) | !duplicated(first_name)) %>%
ungroup()
rulindo_distinct <- rulindo_distinct %>%
mutate(
name = paste0(last_name, first_name)
)
# Function to check if two strings are anagrams
are_anagrams <- function(string1, string2) {
identical(sort(unlist(strsplit(string1, NULL))), sort(unlist(strsplit(string2, NULL))))
}
# Custom function to filter names that are anagrams within each nid group
filter_anagrams <- function(df) {
# Create a logical vector to keep track of which rows to keep
keep <- rep(TRUE, nrow(df))
# Compare each name with every other name in the group
for (i in 1:(nrow(df) - 1)) {
for (j in (i + 1):nrow(df)) {
if (are_anagrams(df$name[i], df$name[j])) {
keep[j] <- FALSE
}
}
}
return(df[keep, ])
}
# Apply the custom filtering function to each nid group
rulindo_distinct <- rulindo_distinct %>%
group_by(nid) %>%
group_modify(~ filter_anagrams(.x)) %>%
ungroup()
# Append rows that are not duplicates (nids with no duplicates)
rulindo_non_duplicates <- rulindo_head_join %>%
filter(!nid %in% filter_rulindo$nid)
# Combine the results
rulindo_head_join.1 <- bind_rows(rulindo_non_duplicates, rulindo_distinct)
head_join <- rbind(karongi_head_join.1, rulindo_head_join.1, rutsiro_head_join, rusizi_head_join)
View(rulindo_head_join.1)
# Combine the results
rulindo_head_join.1 <- bind_rows(rulindo_non_duplicates, rulindo_distinct) %>%
select(-name)
head_join <- rbind(karongi_head_join.1, rulindo_head_join.1, rutsiro_head_join, rusizi_head_join)
village_list_join <- village_list %>%
rename(
provinceid_key = Prov_ID,
province_key = Province,
districtid_key = Distr_ID,
district_key = District,
sectorid_key = Sector_ID,
sector_key = Sector,
cellid_key = Cell_ID,
cell_key = Cell,
villageid_key = Village_ID,
village_key = Name
) %>%
select(provinceid_key, province_key, districtid_key, district_key, sectorid_key, sector_key, cellid_key, cell_key, villageid_key, village_key) %>%
filter(district_key %in% c("Karongi", "Rulindo", "Rutsiro", "Rusizi"))
#household_head list---
household_head <- left_join(village_list_join, head_join, by = c("villageid_key" = "village_id"))
household_head_number<- household_head %>%
group_by(villageid_key) %>%
summarise(hh_head_06 = n())
View(household_head_number)
four_district <- left_join(four_district_2405, household_head_number, by = c("village_id" = "villageid_key"))
View(four_district)
check <- four_district_2406 %>%
filter(district %in% c("Karongi", "Rutsiro", "Ruzisi")) %>%
filter(hh_head_06 != hh_head_05)
View(four_district_2406)
knitr::opts_chunk$set(echo = TRUE)
#library
library(tidyverse)
library(here)
library(readxl)
getwd()
d<- 0.2 # mde, observed effect
P<- 0.5
n<-783 # number of households surveyed
z<- 2.8
signma_square <- 1
m<- 54 # number of villages/cluster
rho <- (d^2 * n * P * (1 - P) - z^2 * signma_square) / (z^2 * signma_square * (m - 1))
rho
d<- 0.2 # mde, observed effect
P<- 0.5
n<-783 # number of households surveyed
z<- 2.8
signma_square <- 1
m<- 54 # number of villages/cluster
rho <- (d^2 * n * P * (1 - P) - z^2 * signma_square) / (z^2 * signma_square * (m - 1))
mde <- function(m, n, signma, base) {
rho <- rho
z <- 2.80
P <- 0.66
m <- m*0.75
n <- n*0.75
mde <- z * signma * sqrt((1 + rho * (m - 1)) / (n * P * (1 - P)))
return(mde/base)
}
#well-being----
#signma set at 1 because there was no baseline data and it was normal distribution
mde_well <- mde(193, 3860, 1, 1)
#monthly energy spending----
#signma = 21.83, base = 10.83, Table 3--B8: monthly total energy spending in Lee et al.
mde_energy <- mde(193, 3860, 21.83, 10.83)
#monthly kerosene spending----
# signma = 2.75, base = 2.64, Table 2 -- B7: monthly kerosene spending
mde_kerosene <- mde(193, 3860, 2.75, 2.64)
#Electricity consumption----
#signma = 16.31, base = 7.9,
# Standard deviation and minimum detectable effect come from the Lee et al. paper.
# Specifically the electricity consumption measurement is in
# **Table B7: Benchmarking average monthly electricity consumption in kWh and USD - Panel A: Newly connected households in sample**.
# Standard deviation: we are given Q1 and Q3, the standard deviation is calculated using the formula below.
# Sepcifically the standard deviation is taking the IQR of households that are newly connected in the sample and their consumption in 2016 (Round 1 survey)
mde_electricity <- mde(193, 3860, 16.31, 7.9)
power_calc <- data.frame(
variable = c("well_being", "monthly energy spending", "monthly kerosene spending", "Electricity consumption"),
`MDE(minimum detectable effect)` = c(mde_well, mde_energy, mde_kerosene, mde_electricity)
)
kable(power_calc, format = "pipe", caption = "Power Calculation results for interested variable")
#library
library(tidyverse)
library(here)
library(readxl)
library(kableExtra)
getwd()
#library
library(tidyverse)
library(here)
library(readxl)
library(kableExtra)
d<- 0.2 # mde, observed effect
P<- 0.5
n<-783 # number of households surveyed
z<- 2.8
signma_square <- 1
m<- 54 # number of villages/cluster
rho <- (d^2 * n * P * (1 - P) - z^2 * signma_square) / (z^2 * signma_square * (m - 1))
mde <- function(m, n, signma, base) {
rho <- rho
z <- 2.80
P <- 0.66
m <- m*0.75
n <- n*0.75
mde <- z * signma * sqrt((1 + rho * (m - 1)) / (n * P * (1 - P)))
return(mde/base)
}
library(knitr)
data <- data.frame(
Category = c("round1", "round2", "pooled"),
ITT = c(0.11, 0.22, 0.16),
TOT = c(0.12, 0.29, 0.19)
)
kable(data, format = "pipe", caption = "Well being regression results from Lee et. al")
library(knitr)
data <- data.frame(
Category = c("round1", "round2", "pooled"),
ITT = c(0.11, 0.22, 0.16),
TOT = c(0.12, 0.29, 0.19)
)
kable(data, format = "pipe", caption = "Well being regression results from Lee et. al")
data <- data.frame(
Category = c("round1", "round2", "pooled"),
ITT = c(0.11, 0.22, 0.16),
TOT = c(0.12, 0.29, 0.19)
)
kable(data, format = "pipe", caption = "Well being regression results from Lee et. al")
View(data)
