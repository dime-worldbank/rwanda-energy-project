geom_bar(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black",
binwidth = 1,       # Each bin covers 2,500
boundary = 0) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
geom_text(aes(x = mean_v, y = 0.65, label = round(mean_v, 2)),
color = "red", hjust = -0.01, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = "",
y = "",
title = v
) +
theme_minimal() +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_blank(),
axis.text = element_text(size = 18)
)
for(v in var_list) {
# Filter the data for the current variable
data_v <- well_long %>% filter(var == v)
# Compute the mean for the current variable
mean_v <- mean(data_v$wellbeing, na.rm = TRUE)
# Create the plot with proportion on the y-axis and x-axis breaks every 2 (0,2,...,10)
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_bar(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black",
binwidth = 1,       # Each bin covers 2,500
boundary = 0) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
geom_text(aes(x = mean_v, y = 0.65, label = round(mean_v, 2)),
color = "red", hjust = -0.01, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = "",
y = "",
title = v
) +
theme_minimal() +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_blank(),
axis.text = element_text(size = 18)
)
# Create a filename using the variable name (removing spaces)
filename <- paste0("plot_wellbeing_", gsub(" ", "_", v), ".jpeg")
# Save the plot with the desired scale
ggsave(file.path(output_path, "lightning seminar plot", filename),
plot = p, device = "jpeg",
width = 16,
height = 8,
dpi = 300,
scale = 0.5)
}
for(v in var_list) {
# Filter the data for the current variable
data_v <- well_long %>% filter(var == v)
# Compute the mean for the current variable
mean_v <- mean(data_v$wellbeing, na.rm = TRUE)
# Create the plot with proportion on the y-axis and x-axis breaks every 2 (0,2,...,10)
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_bar(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black", binwidth = 1, boundary = 0) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
geom_text(aes(x = mean_v, y = 0.65, label = round(mean_v, 2)),
color = "red", hjust = -0.01, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = "",
y = "",
title = v
) +
theme_minimal() +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_blank(),
axis.text = element_text(size = 18)
)
# Create a filename using the variable name (removing spaces)
filename <- paste0("plot_wellbeing_", gsub(" ", "_", v), ".jpeg")
# Save the plot with the desired scale
ggsave(file.path(output_path, "lightning seminar plot", filename),
plot = p, device = "jpeg",
width = 16,
height = 8,
dpi = 300,
scale = 0.5)
}
# Create the plot with proportion on the y-axis and x-axis breaks every 2 (0,2,...,10)
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_bar(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black", binwidth = 1, boundary = 1) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
geom_text(aes(x = mean_v, y = 0.65, label = round(mean_v, 2)),
color = "red", hjust = -0.01, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = "",
y = "",
title = v
) +
theme_minimal() +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_blank(),
axis.text = element_text(size = 18)
)
for(v in var_list) {
# Filter the data for the current variable
data_v <- well_long %>% filter(var == v)
# Compute the mean for the current variable
mean_v <- mean(data_v$wellbeing, na.rm = TRUE)
# Create the plot with proportion on the y-axis and x-axis breaks every 2 (0,2,...,10)
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_bar(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black", binwidth = 1, boundary = 1) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
geom_text(aes(x = mean_v, y = 0.65, label = round(mean_v, 2)),
color = "red", hjust = -0.01, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = "",
y = "",
title = v
) +
theme_minimal() +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_blank(),
axis.text = element_text(size = 18)
)
# Create a filename using the variable name (removing spaces)
filename <- paste0("plot_wellbeing_", gsub(" ", "_", v), ".jpeg")
# Save the plot with the desired scale
ggsave(file.path(output_path, "lightning seminar plot", filename),
plot = p, device = "jpeg",
width = 16,
height = 8,
dpi = 300,
scale = 0.5)
}
for(v in var_list) {
# Filter the data for the current variable
data_v <- well_long %>% filter(var == v)
# Compute the mean for the current variable
mean_v <- mean(data_v$wellbeing, na.rm = TRUE)
# Create the plot with proportion on the y-axis, bins starting at 0, and x-axis breaks every 2
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_histogram(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black",
binwidth = 1, boundary = 0) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_v, y = 0.65, label = round(mean_v, 2),
color = "red", hjust = -0.01, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = "",
y = "",
title = v
) +
theme_minimal() +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_blank(),
axis.text = element_text(size = 18)
)
# Create a filename using the variable name (removing spaces)
filename <- paste0("plot_wellbeing_", gsub(" ", "_", v), ".jpeg")
# Save the plot with the desired scale
ggsave(file.path(output_path, "lightning seminar plot", filename),
plot = p, device = "jpeg",
width = 16,
height = 8,
dpi = 300,
scale = 0.5)
}
for(v in var_list) {
# Filter the data for the current variable
data_v <- well_long %>% filter(var == v)
# Compute the mean for the current variable
mean_v <- mean(data_v$wellbeing, na.rm = TRUE)
# Create the plot with proportion on the y-axis, bins starting at 0, and x-axis breaks every 2
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_histogram(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black",
binwidth = 1, boundary = 0) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_v, y = 0.65, label = round(mean_v, 2),
color = "red", hjust = -0.03, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = "",
y = "",
title = v
) +
theme_minimal() +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_blank(),
axis.text = element_text(size = 18)
)
# Create a filename using the variable name (removing spaces)
filename <- paste0("plot_wellbeing_", gsub(" ", "_", v), ".jpeg")
# Save the plot with the desired scale
ggsave(file.path(output_path, "lightning seminar plot", filename),
plot = p, device = "jpeg",
width = 16,
height = 8,
dpi = 300,
scale = 0.5)
}
for(v in var_list) {
# Filter the data for the current variable
data_v <- well_long %>% filter(var == v)
# Compute the mean for the current variable
mean_v <- mean(data_v$wellbeing, na.rm = TRUE)
# Create the plot with proportion on the y-axis, bins starting at 0, and x-axis breaks every 2
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_histogram(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black",
binwidth = 1) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_v, y = 0.65, label = round(mean_v, 2),
color = "red", hjust = -0.03, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = v,
y = ""
) +
theme_minimal() +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_blank(),
axis.text = element_text(size = 18)
)
# Create a filename using the variable name (removing spaces)
filename <- paste0("plot_wellbeing_", gsub(" ", "_", v), ".jpeg")
# Save the plot with the desired scale
ggsave(file.path(output_path, "lightning seminar plot", filename),
plot = p, device = "jpeg",
width = 16,
height = 8,
dpi = 300,
scale = 0.5)
}
# Get the distinct variable names from well_long
var_list <- unique(well_long$var)
for(v in var_list) {
# Filter the data for the current variable
data_v <- well_long %>% filter(var == v)
# Compute the mean for the current variable
mean_v <- mean(data_v$wellbeing, na.rm = TRUE)
# Create the plot with proportion on the y-axis, bins starting at 0, and x-axis breaks every 2
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_histogram(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black",
binwidth = 1) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_v, y = 0.65, label = round(mean_v, 2),
color = "red", hjust = -0.03, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = v,
y = ""
) +
theme_minimal() +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_blank(),
axis.text = element_text(size = 18)
)
# Create a filename using the variable name (removing spaces)
filename <- paste0("plot_wellbeing_", gsub(" ", "_", v), ".jpeg")
# Save the plot with the desired scale
ggsave(file.path(output_path, "lightning seminar plot", filename),
plot = p, device = "jpeg",
width = 16,
height = 8,
dpi = 300,
scale = 0.5)
}
for(v in var_list) {
# Filter the data for the current variable
data_v <- well_long %>% filter(var == v)
# Compute the mean for the current variable
mean_v <- mean(data_v$wellbeing, na.rm = TRUE)
# Create the plot with proportion on the y-axis, bins starting at 0, and x-axis breaks every 2
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_histogram(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black",
binwidth = 1) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_v, y = 0.65, label = round(mean_v, 2),
color = "red", hjust = -0.03, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = v,
y = ""
) +
theme_minimal() +
theme(
axis.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.text = element_text(size = 18)
)
# Create a filename using the variable name (removing spaces)
filename <- paste0("plot_wellbeing_", gsub(" ", "_", v), ".jpeg")
# Save the plot with the desired scale
ggsave(file.path(output_path, "lightning seminar plot", filename),
plot = p, device = "jpeg",
width = 16,
height = 8,
dpi = 300,
scale = 0.5)
}
pacman::p_load(knitr, stargazer, tidyverse, dplyr, here, sf, ggplot2, readxl, writexl, janitor, randomizr, RCT, purrr, lfe)
library(googlesheets4)
getwd()
# Import Data ----
dropbox <- 'C:/Users/wb614406/Dropbox'
hfc_data_path <- file.path(
dropbox,
"Rwanda Energy/EAQIP/datawork/HFC/data"
)
output_path <- file.path(
dropbox,
"Rwanda Energy/EAQIP/datawork/baseline analysis/output"
)
data_path <- file.path(
dropbox,
"Rwanda Energy/EAQIP/datawork/baseline analysis/data"
)
# Pivot the four variables of interest into long format
well_long <- hfc_plot %>%
select(B5_1, B5_5, B5_6, B5_8) %>%
pivot_longer(
cols = everything(),
names_to = "var",
values_to = "wellbeing"
) %>%
mutate(
var = case_when(
var == "B5_1" ~ "Satisfaction with current economic status",
var == "B5_5" ~ "Satisfaction with energy use in mobile phone charging",
var == "B5_6" ~ "Satisfaction with energy use in lighting",
var == "B5_8" ~ "Satisfaction with current energy status"
)
) %>%
filter(!is.na(wellbeing))
# Get the distinct variable names from well_long
var_list <- unique(well_long$var)
for(v in var_list) {
# Filter the data for the current variable
data_v <- well_long %>% filter(var == v)
# Compute the mean for the current variable
mean_v <- mean(data_v$wellbeing, na.rm = TRUE)
# Create the plot with proportion on the y-axis, bins starting at 0, and x-axis breaks every 2
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_histogram(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black",
binwidth = 1) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_v, y = 0.65, label = round(mean_v, 2),
color = "red", hjust = -0.03, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = v,
y = ""
) +
theme_minimal() +
theme(
axis.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.text = element_text(size = 18)
)
# Create a filename using the variable name (removing spaces)
filename <- paste0("plot_wellbeing_", gsub(" ", "_", v), ".jpeg")
# Save the plot with the desired scale
ggsave(file.path(output_path, "lightning seminar plot", filename),
plot = p, device = "jpeg",
width = 16,
height = 8,
dpi = 300,
scale = 0.5)
}
# Pivot the four variables of interest into long format
well_long <- hfc_plot %>%
select(B5_1, B5_5, B5_6, B5_8) %>%
pivot_longer(
cols = everything(),
names_to = "var",
values_to = "wellbeing"
) %>%
mutate(
var = case_when(
var == "B5_1" ~ "Satisfaction with current economic status",
var == "B5_5" ~ "Satisfaction with energy use in phone charging",
var == "B5_6" ~ "Satisfaction with energy use in lighting",
var == "B5_8" ~ "Satisfaction with current energy status"
)
) %>%
filter(!is.na(wellbeing))
# Get the distinct variable names from well_long
var_list <- unique(well_long$var)
for(v in var_list) {
# Filter the data for the current variable
data_v <- well_long %>% filter(var == v)
# Compute the mean for the current variable
mean_v <- mean(data_v$wellbeing, na.rm = TRUE)
# Create the plot with proportion on the y-axis, bins starting at 0, and x-axis breaks every 2
p <- ggplot(data_v, aes(x = wellbeing)) +
geom_histogram(aes(y = ..count.. / sum(..count..)),
fill = "lightblue", color = "black",
binwidth = 1) +
geom_vline(xintercept = mean_v,
color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_v, y = 0.65, label = round(mean_v, 2),
color = "red", hjust = -0.03, size = 8) +
scale_x_continuous(breaks = seq(0, 10, by = 2)) +
labs(
x = v,
y = ""
) +
theme_minimal() +
theme(
axis.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.text = element_text(size = 18)
)
# Create a filename using the variable name (removing spaces)
filename <- paste0("plot_wellbeing_", gsub(" ", "_", v), ".jpeg")
# Save the plot with the desired scale
ggsave(file.path(output_path, "lightning seminar plot", filename),
plot = p, device = "jpeg",
width = 16,
height = 8,
dpi = 300,
scale = 0.5)
}
log_fixed <- lm(log(lightbulb) ~ log(fixed_system) + household_size, data = hfc_regress)
log_reliability <- lm(log(lightbulb) ~ log(low_reliability) + household_size, data = hfc_regress)
log_appliance <- lm(log(lightbulb) ~ log(appliance) + household_size, data = hfc_regress)
log_reg <- lm(log(lightbulb) ~ log(fixed_system) + log(low_reliability) + log(appliance) +household_size, data = hfc_regress)
hfc_regress <- hfc_regress %>%
mutate(
`log(appliance) - log(fixed_system)` = log(appliance) - log(fixed_system),
`log(fixed_system) - log(low_reliability)` = log(fixed_system) - log(low_reliability)
)
log_diff <- lm(log(lightbulb) ~ log(low_reliability) + `log(appliance) - log(fixed_system)` + `log(fixed_system) - log(low_reliability)` + household_size  , data = hfc_regress)
stargazer(log_fixed,log_appliance, log_reliability,log_reg,log_diff,
type = "latex",
title = "Regression Results with Household Size",
out = "regression_output.latex")
ggplot() +
geom_sf(data = rutsiro_villages, fill = NA, color = "lightgrey", size = 0.3) +
geom_sf(data = rutsiro_lv, color = "blue", size = 0.5) +
geom_sf(data = hfc_rutsiro, color = "red", size = 0.1) +
labs(title = "Electrification Network in Rutsiro") +
theme_minimal()
karongi_shared <- write_xlsx(path = file.path(data_path, "Lot_Karongi_shared.xlsx"))
karongi_shared <- read_xlsx(path = file.path(data_path, "Lot_Karongi_shared.xlsx"))
data_path <- file.path(
dropbox,
"Rwanda Energy/EAQIP/datawork/RCT_data/baseline/data/baseline analysis/data"
)
data_path_1 <- file.path(
dropbox,
"Rwanda Energy/EAQIP/datawork/RCT_data/baseline/data"
)
karongi_shared <- read_xlsx(path = file.path(data_path-1, "Lot_Karongi_shared.xlsx"))
karongi_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Karongi_shared.xlsx"))
rulindo_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Rulindo_shared.xlsx"))
karongi_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Karongi_shared.xlsx"))
rulindo_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Rulindo_shared.xlsx"))
rutsiro_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Rutsiro_shared.xlsx"))
rusizi_1_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Rusizi-1_shared.xlsx"))
rusizi_2_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Rusizi-2_shared.xlsx"))
karongi_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Karongi_shared.xlsx"), sheet = "village_list")
karongi_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Karongi_shared.xlsx"), sheet = "village list")
karongi <- read_xlsx(path = file.path(data_path_1, "Updated scope villages& households","EDCL","Readyboard by lot","Lot_Karongi.xlsx"), sheet = "village list")
rulindo <- read_xlsx(path = file.path(data_path_1,"Updated scope villages& households","EDCL","Readyboard by lot", "Lot_Rulindo.xlsx"), sheet = "village list")
rutsiro <- read_xlsx(path = file.path(data_path_1, "Updated scope villages& households","EDCL","Readyboard by lot","Lot_Rutsiro.xlsx"), sheet = "village list")
rusizi_1 <- read_xlsx(path = file.path(data_path_1,"Updated scope villages& households","EDCL","Readyboard by lot", "Lot_Rusizi-1.xlsx"), sheet = "village list")
rusizi_2 <- read_xlsx(path = file.path(data_path_1, "Updated scope villages& households","EDCL","Readyboard by lot","Lot_Rusizi-2.xlsx"), sheet = "village list")
identical(karongi_shared, karongi)
identical(rulindo_shared, rulindo)
identical(rusizi_1_shared, rusizi_1)
identical(rusizi_2, rusizi_2_shared)
karongi_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Karongi_shared.xlsx"), sheet = "household list")
rulindo_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Rulindo_shared.xlsx"), sheet = "household list")
rutsiro_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Rutsiro_shared.xlsx"), sheet = "household list")
rusizi_1_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Rusizi-1_shared.xlsx"), sheet = "household list")
rusizi_2_shared <- read_xlsx(path = file.path(data_path_1, "Lot_Rusizi-2_shared.xlsx"), sheet = "household list")
karongi <- read_xlsx(path = file.path(data_path_1, "Updated scope villages& households","EDCL","Readyboard by lot","Lot_Karongi.xlsx"), sheet = "household list")
rulindo <- read_xlsx(path = file.path(data_path_1,"Updated scope villages& households","EDCL","Readyboard by lot", "Lot_Rulindo.xlsx"), sheet = "household list")
rutsiro <- read_xlsx(path = file.path(data_path_1, "Updated scope villages& households","EDCL","Readyboard by lot","Lot_Rutsiro.xlsx"), sheet = "household list")
rusizi_1 <- read_xlsx(path = file.path(data_path_1,"Updated scope villages& households","EDCL","Readyboard by lot", "Lot_Rusizi-1.xlsx"), sheet = "household list")
rusizi_2 <- read_xlsx(path = file.path(data_path_1, "Updated scope villages& households","EDCL","Readyboard by lot","Lot_Rusizi-2.xlsx"), sheet = "household list")
identical(karongi, karongi_shared)
identical(rulindo, rulindo_shared)
identical(rutsiro, rutsiro_shared)
identical(rusizi_1, rusizi_1_shared)
identical(rusizi_2, rusizi_2_shared)
